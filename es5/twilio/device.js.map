{"version":3,"file":"device.js","sourceRoot":"","sources":["../../lib/twilio/device.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module Voice\n * @preferred\n * @publicapi\n */\nimport { EventEmitter } from 'events';\nimport AudioHelper from './audiohelper';\nimport Connection from './connection';\nimport DialtonePlayer from './dialtonePlayer';\nimport { PStream } from './pstream';\nimport { getRegionShortcode, getRegionURI, Region } from './regions';\nimport Log, { LogLevel } from './tslog';\nimport { Exception, queryToJson } from './util';\n\nconst C = require('./constants');\nconst Publisher = require('./eventpublisher');\nconst rtc = require('./rtc');\nconst getUserMedia = require('./rtc/getusermedia');\nconst Sound = require('./sound');\nconst { isUnifiedPlanDefault } = require('./util');\n\n/**\n * @private\n */\nconst networkInformation = (navigator as any).connection\n  || (navigator as any).mozConnection\n  || (navigator as any).webkitConnection;\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPStream = any;\n/**\n * @private\n */\nexport type IPublisher = any;\n/**\n * @private\n */\nexport type ISound = any;\n\nconst REGISTRATION_INTERVAL = 30000;\nconst RINGTONE_PLAY_TIMEOUT = 2000;\n\ndeclare const RTCRtpTransceiver: any;\ndeclare const webkitAudioContext: typeof AudioContext;\n\nlet hasBeenWarnedHandlers: boolean = false;\nlet hasBeenWarnedSounds: boolean = false;\n\n/**\n * Options that may be passed to the {@link Device} constructor for internal testing.\n * @private\n */\nexport interface IExtendedDeviceOptions extends Device.Options {\n  /**\n   * Custom {@link AudioHelper} constructor\n   */\n  AudioHelper?: any;\n\n  /**\n   * Hostname of the signaling gateway to connect to.\n   */\n  chunderw?: string;\n\n  /**\n   * Custom {@link Connection} constructor\n   */\n  connectionFactory?: Connection;\n\n  /**\n   * Hostname of the event gateway to connect to.\n   */\n  eventgw?: string;\n\n  /**\n   * A list of specific ICE servers to use. Overridden by {@link Device.Options.rtcConfiguration}.\n   * @deprecated\n   */\n  iceServers?: Object[];\n\n  /**\n   * Ignore browser support, disabling the exception that is thrown when neither WebRTC nor\n   * ORTC are supported.\n   */\n  ignoreBrowserSupport?: boolean;\n\n  /**\n   * Custom {@link Log} constructor\n   */\n  Log?: typeof Log;\n\n  /**\n   * Whether to disable audio flag in MediaPresence (rrowland: Do we need this?)\n   */\n  noRegister?: boolean;\n\n  /**\n   * Custom PStream constructor\n   */\n  pStreamFactory?: IPStream;\n\n  /**\n   * Custom Publisher constructor\n   */\n  Publisher?: IPublisher;\n\n  /**\n   * Whether Insights events should be published\n   */\n  publishEvents?: boolean;\n\n  /**\n   * RTC Constraints to pass to getUserMedia when making or accepting a Call.\n   * The format of this object depends on browser.\n   */\n  rtcConstraints?: Object;\n\n  /**\n   * Custom Sound constructor\n   */\n  soundFactory?: ISound;\n}\n\n/**\n * A sound definition used to initialize a Sound file.\n * @private\n */\nexport interface ISoundDefinition {\n  /**\n   * Name of the sound file.\n   */\n  filename: string;\n\n  /**\n   * The amount of time this sound file should play before being stopped automatically.\n   */\n  maxDuration?: number;\n\n  /**\n   * Whether or not this sound should loop after playthrough finishes.\n   */\n  shouldLoop?: boolean;\n}\n\n/**\n * Twilio Device. Allows registration for incoming calls, and placing outgoing calls.\n * @publicapi\n */\nclass Device extends EventEmitter {\n  /**\n   * The AudioContext to be used by {@link Device} instances.\n   * @private\n   */\n  static get audioContext(): AudioContext | undefined {\n    return Device._audioContext;\n  }\n\n  /**\n   * Which sound file extension is supported.\n   * @private\n   */\n  static get extension(): 'mp3' | 'ogg' {\n    // NOTE(mroberts): Node workaround.\n    const a: any = typeof document !== 'undefined'\n      ? document.createElement('audio') : { canPlayType: false };\n\n    let canPlayMp3;\n    try {\n      canPlayMp3 = a.canPlayType && !!a.canPlayType('audio/mpeg').replace(/no/, '');\n    } catch (e) {\n      canPlayMp3 = false;\n    }\n\n    let canPlayVorbis;\n    try {\n      canPlayVorbis = a.canPlayType && !!a.canPlayType('audio/ogg;codecs=\\'vorbis\\'').replace(/no/, '');\n    } catch (e) {\n      canPlayVorbis = false;\n    }\n\n    return (canPlayVorbis && !canPlayMp3) ? 'ogg' : 'mp3';\n  }\n\n  /**\n   * Whether or not this SDK is supported by the current browser.\n   */\n  static get isSupported(): boolean { return rtc.enabled(); }\n\n  /**\n   * String representation of {@link Device} class.\n   * @private\n   */\n  static toString(): string {\n    return '[Twilio.Device class]';\n  }\n\n  /**\n   * An AudioContext to share between {@link Device}s.\n   */\n  private static _audioContext?: AudioContext;\n\n  /**\n   * A DialtonePlayer to play mock DTMF sounds through.\n   */\n  private static _dialtonePlayer?: DialtonePlayer;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private static _isUnifiedPlanDefault: boolean = typeof window !== 'undefined'\n      && typeof RTCPeerConnection !== 'undefined'\n      && typeof RTCRtpTransceiver !== 'undefined'\n    ? isUnifiedPlanDefault(window, window.navigator, RTCPeerConnection, RTCRtpTransceiver)\n    : false;\n\n  /**\n   * The AudioHelper instance associated with this {@link Device}.\n   */\n  audio: AudioHelper | null = null;\n\n  /**\n   * An array of {@link Connection}s. Though only one can be active, multiple may exist when there\n   * are multiple incoming, unanswered {@link Connection}s.\n   */\n  connections: Connection[] = [];\n\n  /**\n   * Whether or not {@link Device.setup} has been called.\n   */\n  isInitialized: boolean = false;\n\n  /**\n   * Methods to enable/disable each sound. Empty if the {@link Device} has not\n   * yet been set up.\n   */\n  readonly sounds: Partial<Record<Device.SoundName, (value?: boolean) => void>> = { };\n\n  /**\n   * The JWT string currently being used to authenticate this {@link Device}.\n   */\n  token: string | null = null;\n\n  /**\n   * The currently active {@link Connection}, if there is one.\n   */\n  private _activeConnection: Connection | null = null;\n\n  /**\n   * An audio input MediaStream to pass to new {@link Connection} instances.\n   */\n  private _connectionInputStream: MediaStream | null = null;\n\n  /**\n   * An array of {@link Device} IDs to be used to play sounds through, to be passed to\n   * new {@link Connection} instances.\n   */\n  private _connectionSinkIds: string[] = ['default'];\n\n  /**\n   * Whether each sound is enabled.\n   */\n  private _enabledSounds: Record<Device.ToggleableSound, boolean> = {\n    [Device.SoundName.Disconnect]: true,\n    [Device.SoundName.Incoming]: true,\n    [Device.SoundName.Outgoing]: true,\n  };\n\n  /**\n   * An instance of Log to use.\n   */\n  private _log: Log = new Log(LogLevel.Off);\n\n  /**\n   * The current LogLevel\n   */\n  private _logLevel: LogLevel = LogLevel.Off;\n\n  /**\n   * An Insights Event Publisher.\n   */\n  private _publisher: IPublisher | null = null;\n\n  /**\n   * The region the {@link Device} is connected to.\n   */\n  private _region: Region | string | null = null;\n\n  /**\n   * The current status of the {@link Device}.\n   */\n  private _status: Device.Status = Device.Status.Offline;\n\n  /**\n   * Value of 'audio' determines whether we should be registered for incoming calls.\n   */\n  private mediaPresence: { audio: boolean } = { audio: true };\n\n  /**\n   * The options passed to {@link Device} constructor or Device.setup.\n   */\n  private options: Device.Options = {\n    allowIncomingWhileBusy: false,\n    audioConstraints: true,\n    closeProtection: false,\n    codecPreferences: [Connection.Codec.PCMU, Connection.Codec.Opus],\n    connectionFactory: Connection,\n    debug: false,\n    dscp: true,\n    eventgw: 'eventgw.twilio.com',\n    iceServers: [],\n    noRegister: false,\n    pStreamFactory: PStream,\n    region: Region.Gll,\n    rtcConstraints: { },\n    soundFactory: Sound,\n    sounds: { },\n    warnings: true,\n  };\n\n  /**\n   * A timeout ID for a setTimeout schedule to re-register the {@link Device}.\n   */\n  private regTimer: NodeJS.Timer | null = null;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * The Signaling stream.\n   */\n  private stream: IPStream | null = null;\n\n  /**\n   * Construct a {@link Device} instance, without setting up up. {@link Device.setup} must\n   * be called later to initialize the {@link Device}.\n   * @constructor\n   * @param [token] - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  constructor();\n  /**\n   * Construct a {@link Device} instance, and set it up as part of the construction.\n   * @constructor\n   * @param [token] - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  constructor(token: string, options?: Device.Options);\n  constructor(token?: string, options?: Device.Options) {\n    super();\n\n    if (token) {\n      this.setup(token, options);\n    } else if (options) {\n      throw new Error('Cannot construct a Device with options but without a token');\n    }\n  }\n\n  /**\n   * Return the active {@link Connection}. Null or undefined for backward compatibility.\n   */\n  activeConnection(): Connection | null | undefined {\n    if (!this.isInitialized) {\n      return null;\n    }\n    // @rrowland This should only return activeConnection, but customers have built around this\n    // broken behavior and in order to not break their apps we are including this until\n    // the next big release.\n    return this._activeConnection || this.connections[0];\n  }\n\n  /**\n   * @deprecated Set a handler for the cancel event.\n   * @param handler\n   */\n  cancel(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Cancel, handler);\n  }\n\n  /**\n   * Make an outgoing Call.\n   * @param [params] - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param [audioConstraints]\n   */\n  connect(params?: Record<string, string>,\n          audioConstraints?: MediaTrackConstraints | boolean): Connection;\n  /**\n   * Add a listener for the connect event.\n   * @param handler - A handler to set on the connect event.\n   */\n  connect(handler: (connection: Connection) => any): null;\n  connect(paramsOrHandler?: Record<string, string> | ((connection: Connection) => any),\n          audioConstraints?: MediaTrackConstraints | boolean): Connection | null {\n    if (typeof paramsOrHandler === 'function') {\n      this._addHandler(Device.EventName.Connect, paramsOrHandler);\n      return null;\n    }\n\n    this._throwUnlessSetup('connect');\n\n    if (this._activeConnection) {\n      throw new Error('A Connection is already active');\n    }\n\n    const params: Record<string, string> = paramsOrHandler || { };\n    audioConstraints = audioConstraints || this.options && this.options.audioConstraints || { };\n    const connection = this._activeConnection = this._makeConnection(params);\n\n    // Make sure any incoming connections are ignored\n    this.connections.splice(0).forEach(conn => conn.ignore());\n\n    // Stop the incoming sound if it's playing\n    this.soundcache.get(Device.SoundName.Incoming).stop();\n\n    connection.accept(audioConstraints);\n    this._publishNetworkChange();\n    return connection;\n  }\n\n  /**\n   * Destroy the {@link Device}, freeing references to be garbage collected.\n   */\n  destroy(): void {\n    this._stopRegistrationTimer();\n\n    if (this.audio) {\n      this.audio._unbind();\n    }\n\n    if (this.stream) {\n      this.stream.destroy();\n      this.stream = null;\n    }\n\n    if (networkInformation) {\n      networkInformation.removeEventListener('change', this._publishNetworkChange);\n    }\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('beforeunload', this._confirmClose);\n      window.removeEventListener('unload', this._disconnectAll);\n    }\n  }\n\n  /**\n   * Set a handler for the disconnect event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  disconnect(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Disconnect, handler);\n  }\n\n  /**\n   * Disconnect all {@link Connection}s.\n   */\n  disconnectAll(): void {\n    this._throwUnlessSetup('disconnectAll');\n    this._disconnectAll();\n  }\n\n  /**\n   * Set a handler for the error event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  error(handler: (error: Connection) => any): this {\n    return this._addHandler(Device.EventName.Error, handler);\n  }\n\n  /**\n   * Set a handler for the incoming event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  incoming(handler: (connection: Connection) => any): this {\n    return this._addHandler(Device.EventName.Incoming, handler);\n  }\n\n  /**\n   * Set a handler for the offline event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  offline(handler: (device: Device) => any): this {\n    return this._addHandler(Device.EventName.Offline, handler);\n  }\n\n  /**\n   * Set a handler for the ready event.\n   * @deprecated Use {@link Device.on}.\n   * @param handler\n   */\n  ready(handler: (device: Device) => any): this {\n    return this._addHandler(Device.EventName.Ready, handler);\n  }\n\n  /**\n   * Get the {@link Region} string the {@link Device} is currently connected to, or 'offline'\n   * if not connected.\n   */\n  region(): string {\n    this._throwUnlessSetup('region');\n    return typeof this._region === 'string' ? this._region : 'offline';\n  }\n\n  /**\n   * Register to receive incoming calls. Does not need to be called unless {@link Device.unregisterPresence}\n   * has been called directly.\n   */\n  registerPresence(): this {\n    this._throwUnlessSetup('registerPresence');\n    this.mediaPresence.audio = true;\n    this._sendPresence();\n    return this;\n  }\n\n  /**\n   * Remove an event listener\n   * @param event - The event name to stop listening for\n   * @param listener - The callback to remove\n   */\n  removeListener(event: Device.EventName, listener: (...args: any[]) => void): this {\n    EventEmitter.prototype.removeListener.call(this, event, listener);\n    return this;\n  }\n\n  /**\n   * Initialize the {@link Device}.\n   * @param token - A Twilio JWT token string granting this {@link Device} access.\n   * @param [options]\n   */\n  setup(token: string, options: Device.Options = { }): this {\n    if (!Device.isSupported && !options.ignoreBrowserSupport) {\n      throw new Exception(`twilio.js 1.3+ SDKs require WebRTC/ORTC browser support. \\\n        For more information, see <https://www.twilio.com/docs/api/client/twilio-js>. \\\n        If you have any questions about this announcement, please contact \\\n        Twilio Support at <help@twilio.com>.`);\n    }\n\n    if (!token) {\n      throw new Exception('Token is required for Device.setup()');\n    }\n\n    if (!Device._audioContext) {\n      if (typeof AudioContext !== 'undefined') {\n        Device._audioContext = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Device._audioContext = new webkitAudioContext();\n      }\n    }\n\n    if (Device._audioContext && options.fakeLocalDTMF) {\n      if (!Device._dialtonePlayer) {\n        Device._dialtonePlayer = new DialtonePlayer(Device._audioContext);\n      }\n    } else if (Device._dialtonePlayer) {\n      Device._dialtonePlayer.cleanup();\n      delete Device._dialtonePlayer;\n    }\n\n    if (this.isInitialized) {\n      this._log.info('Found existing Device; using new token but ignoring options');\n      this.updateToken(token);\n      return this;\n    }\n\n    this.isInitialized = true;\n\n    Object.assign(this.options, options);\n\n    if (this.options.dscp) {\n      (this.options.rtcConstraints as any).optional = [{ googDscp: true }];\n    }\n\n    this._logLevel = this.options.debug ? LogLevel.Debug\n      : this.options.warnings ? LogLevel.Warn\n      : LogLevel.Off;\n    this._log = new (this.options.Log || Log)(this._logLevel);\n\n    const getOrSetSound = (key: Device.ToggleableSound, value?: boolean) => {\n      if (!hasBeenWarnedSounds) {\n        this._log.warn('Device.sounds is deprecated and will be removed in the next breaking ' +\n          'release. Please use the new functionality available on Device.audio.');\n        hasBeenWarnedSounds = true;\n      }\n\n      if (typeof value !== 'undefined') {\n        this._enabledSounds[key] = value;\n      }\n\n      return this._enabledSounds[key];\n    };\n\n    [Device.SoundName.Disconnect, Device.SoundName.Incoming, Device.SoundName.Outgoing]\n        .forEach((eventName: Device.SoundName) => {\n      this.sounds[eventName] = getOrSetSound.bind(null, eventName);\n    });\n\n    const regionURI = getRegionURI(this.options.region, (newRegion: string) => {\n      this._log.warn(`Region ${this.options.region} is deprecated, please use ${newRegion}.`);\n    });\n\n    this.options.chunderw = `wss://${this.options.chunderw || regionURI}/signal`;\n\n    const defaultSounds: Record<string, ISoundDefinition> = {\n      disconnect: { filename: 'disconnect', maxDuration: 3000 },\n      dtmf0: { filename: 'dtmf-0', maxDuration: 1000 },\n      dtmf1: { filename: 'dtmf-1', maxDuration: 1000 },\n      dtmf2: { filename: 'dtmf-2', maxDuration: 1000 },\n      dtmf3: { filename: 'dtmf-3', maxDuration: 1000 },\n      dtmf4: { filename: 'dtmf-4', maxDuration: 1000 },\n      dtmf5: { filename: 'dtmf-5', maxDuration: 1000 },\n      dtmf6: { filename: 'dtmf-6', maxDuration: 1000 },\n      dtmf7: { filename: 'dtmf-7', maxDuration: 1000 },\n      dtmf8: { filename: 'dtmf-8', maxDuration: 1000 },\n      dtmf9: { filename: 'dtmf-9', maxDuration: 1000 },\n      dtmfh: { filename: 'dtmf-hash', maxDuration: 1000 },\n      dtmfs: { filename: 'dtmf-star', maxDuration: 1000 },\n      incoming: { filename: 'incoming', shouldLoop: true },\n      outgoing: { filename: 'outgoing', maxDuration: 3000 },\n    };\n\n    for (const name of Object.keys(defaultSounds)) {\n      const soundDef: ISoundDefinition = defaultSounds[name];\n\n      const defaultUrl: string = `${C.SOUNDS_BASE_URL}/${soundDef.filename}.${Device.extension}?cache=1_4_23`;\n      const soundUrl: string = this.options.sounds && this.options.sounds[name as Device.SoundName] || defaultUrl;\n      const sound: any = new this.options.soundFactory(name, soundUrl, {\n        audioContext: this.options.disableAudioContextSounds ? null : Device.audioContext,\n        maxDuration: soundDef.maxDuration,\n        shouldLoop: soundDef.shouldLoop,\n      });\n\n      this.soundcache.set(name as Device.SoundName, sound);\n    }\n\n    this._publisher = (this.options.Publisher || Publisher)('twilio-js-sdk', token, {\n      defaultPayload: this._createDefaultPayload,\n      host: this.options.eventgw,\n    } as any);\n\n    if (this.options.publishEvents === false) {\n      this._publisher.disable();\n    }\n\n    if (networkInformation) {\n      networkInformation.addEventListener('change', this._publishNetworkChange);\n    }\n\n    this.audio = new (this.options.AudioHelper || AudioHelper)\n        (this._updateSinkIds, this._updateInputStream, getUserMedia, {\n      audioContext: Device.audioContext,\n      enabledSounds: this._enabledSounds,\n      logLevel: this._logLevel,\n    }) as AudioHelper;\n\n    this.audio.on('deviceChange', (lostActiveDevices: MediaDeviceInfo[]) => {\n      const activeConnection: Connection | null = this._activeConnection;\n      const deviceIds: string[] = lostActiveDevices.map((device: MediaDeviceInfo) => device.deviceId);\n\n      this._publisher.info('audio', 'device-change', {\n        lost_active_device_ids: deviceIds,\n      }, activeConnection);\n\n      if (activeConnection) {\n        activeConnection.mediaStream._onInputDevicesChanged();\n      }\n    });\n\n    this.mediaPresence.audio = !this.options.noRegister;\n    this.updateToken(token);\n\n    // Setup close protection and make sure we clean up ongoing calls on unload.\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('unload', this._disconnectAll);\n      if (this.options.closeProtection) {\n        window.addEventListener('beforeunload', this._confirmClose);\n      }\n    }\n\n    // (rrowland) This maintains backward compatibility, but we should look at\n    // removing this next breaking change. Any error should be caught by the\n    // customer, and anything that's not a fatal error should not be emitted\n    // via error event.\n    this.on(Device.EventName.Error, () => {\n      if (this.listenerCount('error') > 1) { return; }\n      this._log.info('Uncaught error event suppressed.');\n    });\n\n    return this;\n  }\n\n  /**\n   * Get the status of this {@link Device} instance\n   */\n  status(): Device.Status {\n    this._throwUnlessSetup('status');\n    return this._activeConnection ? Device.Status.Busy : this._status;\n  }\n\n  /**\n   * String representation of {@link Device} instance.\n   * @private\n   */\n  toString() {\n    return '[Twilio.Device instance]';\n  }\n\n  /**\n   * Unregister to receiving incoming calls.\n   */\n  unregisterPresence(): this {\n    this._throwUnlessSetup('unregisterPresence');\n\n    this.mediaPresence.audio = false;\n    this._sendPresence();\n    return this;\n  }\n\n  /**\n   * Update the token and re-register.\n   * @param token - The new token JWT string to register with.\n   */\n  updateToken(token: string): void {\n    this._throwUnlessSetup('updateToken');\n    this.token = token;\n    this.register(token);\n  }\n\n  /**\n   * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n   * @param eventName - Name of the event\n   * @param handler - A handler to call when the event is emitted\n   */\n  private _addHandler(eventName: Device.EventName, handler: (...args: any[]) => any): this {\n    if (!hasBeenWarnedHandlers) {\n      this._log.warn(`Device callback handlers (connect, error, offline, incoming, cancel, ready, disconnect) \\\n        have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter \\\n        interface can be used to set event listeners. Example: device.on('${eventName}', handler)`);\n      hasBeenWarnedHandlers = true;\n    }\n\n    this.addListener(eventName, handler);\n    return this;\n  }\n\n  /**\n   * Called on window's beforeunload event if closeProtection is enabled,\n   * preventing users from accidentally navigating away from an active call.\n   * @param event\n   */\n  private _confirmClose = (event: any): string => {\n    if (!this._activeConnection) { return ''; }\n\n    const closeProtection: boolean | string = this.options.closeProtection || false;\n    const confirmationMsg: string = typeof closeProtection !== 'string'\n      ? 'A call is currently in-progress. Leaving or reloading this page will end the call.'\n      : closeProtection;\n\n    (event || window.event).returnValue = confirmationMsg;\n    return confirmationMsg;\n  }\n\n  /**\n   * Create the default Insights payload\n   * @param [connection]\n   */\n  private _createDefaultPayload = (connection?: Connection): Record<string, any> => {\n    const payload: Record<string, any> = {\n      dscp: !!this.options.dscp,\n      platform: rtc.getMediaEngine(),\n      sdk_version: C.RELEASE_VERSION,\n      selected_region: this.options.region,\n    };\n\n    function setIfDefined(propertyName: string, value: string | undefined) {\n      if (value) { payload[propertyName] = value; }\n    }\n\n    if (connection) {\n      const callSid = connection.parameters.CallSid;\n      setIfDefined('call_sid', /^TJ/.test(callSid) ? undefined : callSid);\n      setIfDefined('temp_call_sid', connection.outboundConnectionId);\n      setIfDefined('audio_codec', connection.codec);\n      payload.direction = connection.direction;\n    }\n\n    const stream: IPStream = this.stream;\n    if (stream) {\n      setIfDefined('gateway', stream.gateway);\n      setIfDefined('region', stream.region);\n    }\n\n    return payload;\n  }\n\n  /**\n   * Disconnect all {@link Connection}s.\n   */\n  private _disconnectAll = (): void => {\n    const connections = this.connections.splice(0);\n    connections.forEach((conn: Connection) => conn.disconnect());\n\n    if (this._activeConnection) {\n      this._activeConnection.disconnect();\n    }\n  }\n\n  /**\n   * Find a {@link Connection} by its CallSid.\n   * @param callSid\n   */\n  private _findConnection(callSid: string): Connection | null {\n    return this.connections.find(conn => conn.parameters.CallSid === callSid\n      || conn.outboundConnectionId === callSid) || null;\n  }\n\n  /**\n   * Create a new {@link Connection}.\n   * @param twimlParams - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param [options] - Options to be used to instantiate the {@link Connection}.\n   */\n  private _makeConnection(twimlParams: Record<string, string>, options?: Connection.Options): Connection {\n    const config: Connection.Config = {\n      audioHelper: this.audio,\n      getUserMedia,\n      isUnifiedPlanDefault: Device._isUnifiedPlanDefault,\n      pstream: this.stream,\n      publisher: this._publisher,\n      soundcache: this.soundcache,\n    };\n\n    options = Object.assign({\n      MediaStream: this.options.MediaStream\n        || this.options.mediaStreamFactory\n        || rtc.PeerConnection,\n      audioConstraints: this.options.audioConstraints,\n      beforeAccept: (conn: Connection) => {\n        if (!this._activeConnection || this._activeConnection === conn) {\n          return;\n        }\n\n        this._activeConnection.disconnect();\n        this._removeConnection(this._activeConnection);\n      },\n      codecPreferences: this.options.codecPreferences,\n      debug: this.options.debug,\n      dialtonePlayer: Device._dialtonePlayer,\n      dscp: this.options.dscp,\n      enableRingingState: this.options.enableRingingState,\n      getInputStream: (): MediaStream | null => this._connectionInputStream,\n      getSinkIds: (): string[] => this._connectionSinkIds,\n      rtcConfiguration: this.options.rtcConfiguration || { iceServers: this.options.iceServers },\n      rtcConstraints: this.options.rtcConstraints,\n      shouldPlayDisconnect: () => this._enabledSounds.disconnect,\n      twimlParams,\n      warnings: this.options.warnings,\n    }, options);\n\n    const connection = new this.options.connectionFactory(config, options);\n\n    connection.once('accept', () => {\n      this._removeConnection(connection);\n      this._activeConnection = connection;\n      if (this.audio) {\n        this.audio._maybeStartPollingVolume();\n      }\n\n      if (connection.direction === Connection.CallDirection.Outgoing && this._enabledSounds.outgoing) {\n        this.soundcache.get(Device.SoundName.Outgoing).play();\n      }\n\n      this.emit('connect', connection);\n    });\n\n    connection.addListener('error', (error: Connection.Error) => {\n      if (connection.status() === 'closed') {\n        this._removeConnection(connection);\n      }\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n      this.emit('error', error);\n    });\n\n    connection.once('cancel', () => {\n      this._log.info(`Canceled: ${connection.parameters.CallSid}`);\n      this._removeConnection(connection);\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n      this.emit('cancel', connection);\n    });\n\n    connection.once('disconnect', () => {\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._removeConnection(connection);\n      this.emit('disconnect', connection);\n    });\n\n    connection.once('reject', () => {\n      this._log.info(`Rejected: ${connection.parameters.CallSid}`);\n      if (this.audio) {\n        this.audio._maybeStopPollingVolume();\n      }\n      this._removeConnection(connection);\n      this._maybeStopIncomingSound();\n    });\n\n    return connection;\n  }\n\n  /**\n   * Stop the incoming sound if no {@link Connection}s remain.\n   */\n  private _maybeStopIncomingSound(): void {\n    if (!this.connections.length) {\n      this.soundcache.get(Device.SoundName.Incoming).stop();\n    }\n  }\n\n  /**\n   * Called when a 'close' event is received from the signaling stream.\n   */\n  private _onSignalingClose = () => {\n    this.stream = null;\n  }\n\n  /**\n   * Called when a 'connected' event is received from the signaling stream.\n   */\n  private _onSignalingConnected = (payload: Record<string, any>) => {\n    this._region = getRegionShortcode(payload.region) || payload.region;\n    this._sendPresence();\n  }\n\n  /**\n   * Called when an 'error' event is received from the signaling stream.\n   */\n  private _onSignalingError = (payload: Record<string, any>) => {\n    const error = payload.error;\n    if (!error) { return; }\n\n    const sid = payload.callsid;\n    if (sid) {\n      error.connection = this._findConnection(sid);\n    }\n\n    // Stop trying to register presence after token expires\n    if (error.code === 31205) {\n      this._stopRegistrationTimer();\n    }\n\n    this._log.info('Received error: ', error);\n    this.emit('error', error);\n  }\n\n  /**\n   * Called when an 'invite' event is received from the signaling stream.\n   */\n  private _onSignalingInvite = (payload: Record<string, any>) => {\n    const wasBusy = !!this._activeConnection;\n    if (wasBusy && !this.options.allowIncomingWhileBusy) {\n      this._log.info('Device busy; ignoring incoming invite');\n      return;\n    }\n\n    if (!payload.callsid || !payload.sdp) {\n      this.emit('error', { message: 'Malformed invite from gateway' });\n      return;\n    }\n\n    const callParameters = payload.parameters || { };\n    callParameters.CallSid = callParameters.CallSid || payload.callsid;\n\n    const customParameters = Object.assign({ }, queryToJson(callParameters.Params));\n    const connection = this._makeConnection(customParameters, {\n      callParameters,\n      offerSdp: payload.sdp,\n    });\n\n    this.connections.push(connection);\n\n    connection.once('accept', () => {\n      this.soundcache.get(Device.SoundName.Incoming).stop();\n      this._publishNetworkChange();\n    });\n\n    const play = (this._enabledSounds.incoming && !wasBusy)\n      ? () => this.soundcache.get(Device.SoundName.Incoming).play()\n      : () => Promise.resolve();\n\n    this._showIncomingConnection(connection, play);\n  }\n\n  /**\n   * Called when an 'offline' event is received from the signaling stream.\n   */\n  private _onSignalingOffline = () => {\n    this._log.info('Stream is offline');\n    this._status = Device.Status.Offline;\n    this._region = null;\n    this.emit('offline', this);\n  }\n\n  /**\n   * Called when a 'ready' event is received from the signaling stream.\n   */\n  private _onSignalingReady = () => {\n    this._log.info('Stream is ready');\n    this._status = Device.Status.Ready;\n    this.emit('ready', this);\n  }\n\n  /**\n   * Publish a NetworkInformation#change event to Insights if there's an active {@link Connection}.\n   */\n  private _publishNetworkChange = () => {\n    if (!this._activeConnection) {\n      return;\n    }\n\n    if (networkInformation) {\n      this._publisher.info('network-information', 'network-change', {\n        connection_type: networkInformation.type,\n        downlink: networkInformation.downlink,\n        downlinkMax: networkInformation.downlinkMax,\n        effective_type: networkInformation.effectiveType,\n        rtt: networkInformation.rtt,\n      }, this._activeConnection);\n    }\n  }\n\n  /**\n   * Remove a {@link Connection} from device.connections by reference\n   * @param connection\n   */\n  private _removeConnection(connection: Connection): void {\n    if (this._activeConnection === connection) {\n      this._activeConnection = null;\n    }\n\n    for (let i = this.connections.length - 1; i >= 0; i--) {\n      if (connection === this.connections[i]) {\n        this.connections.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Register with the signaling server.\n   */\n  private _sendPresence(): void {\n    if (!this.stream) { return; }\n\n    this.stream.register({ audio: this.mediaPresence.audio });\n    if (this.mediaPresence.audio) {\n      this._startRegistrationTimer();\n    } else {\n      this._stopRegistrationTimer();\n    }\n  }\n\n  /**\n   * Set up the connection to the signaling server.\n   * @param token\n   */\n  private _setupStream(token: string) {\n    this._log.info('Setting up VSP');\n    this.stream = this.options.pStreamFactory(token, this.options.chunderw, {\n      backoffMaxMs: this.options.backoffMaxMs,\n      debug: this.options.debug,\n    });\n\n    this.stream.addListener('close', this._onSignalingClose);\n    this.stream.addListener('connected', this._onSignalingConnected);\n    this.stream.addListener('error', this._onSignalingError);\n    this.stream.addListener('invite', this._onSignalingInvite);\n    this.stream.addListener('offline', this._onSignalingOffline);\n    this.stream.addListener('ready', this._onSignalingReady);\n  }\n\n  /**\n   * Start playing the incoming ringtone, and subsequently emit the incoming event.\n   * @param connection\n   * @param play - The function to be used to play the sound. Must return a Promise.\n   */\n  private _showIncomingConnection(connection: Connection, play: Function): Promise<void> {\n    let timeout: NodeJS.Timer;\n    return Promise.race([\n      play(),\n      new Promise((resolve, reject) => {\n        timeout = setTimeout(() => {\n          reject(new Error('Playing incoming ringtone took too long; it might not play. Continuing execution...'));\n        }, RINGTONE_PLAY_TIMEOUT);\n      }),\n    ]).catch(reason => {\n      this._log.info(reason.message);\n    }).then(() => {\n      clearTimeout(timeout);\n      this.emit('incoming', connection);\n    });\n  }\n\n  /**\n   * Set a timeout to send another register message to the signaling server.\n   */\n  private _startRegistrationTimer(): void {\n    this._stopRegistrationTimer();\n    this.regTimer = setTimeout(() => {\n      this._sendPresence();\n    }, REGISTRATION_INTERVAL);\n  }\n\n  /**\n   * Stop sending registration messages to the signaling server.\n   */\n  private _stopRegistrationTimer(): void {\n    if (this.regTimer) {\n      clearTimeout(this.regTimer);\n    }\n  }\n\n  /**\n   * Throw an Error if Device.setup has not been called for this instance.\n   * @param methodName - The name of the method being called before setup()\n   */\n  private _throwUnlessSetup(methodName: string) {\n    if (!this.isInitialized) { throw new Error(`Call Device.setup() before ${methodName}`); }\n  }\n\n  /**\n   * Update the input stream being used for calls so that any current call and all future calls\n   * will use the new input stream.\n   * @param inputStream\n   */\n  private _updateInputStream = (inputStream: MediaStream | null): Promise<void> => {\n    const connection: Connection | null = this._activeConnection;\n\n    if (connection && !inputStream) {\n      return Promise.reject(new Error('Cannot unset input device while a call is in progress.'));\n    }\n\n    this._connectionInputStream = inputStream;\n    return connection\n      ? connection._setInputTracksFromStream(inputStream)\n      : Promise.resolve();\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the incoming ringtone through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateRingtoneSinkIds(sinkIds: string[]): Promise<void> {\n    return Promise.resolve(this.soundcache.get(Device.SoundName.Incoming).setSinkIds(sinkIds));\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play sounds through.\n   * @param type - Whether to update ringtone or speaker sounds\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSinkIds = (type: 'ringtone' | 'speaker', sinkIds: string[]): Promise<void> => {\n    const promise: Promise<void> = type === 'ringtone'\n      ? this._updateRingtoneSinkIds(sinkIds)\n      : this._updateSpeakerSinkIds(sinkIds);\n\n    return promise.then(() => {\n      this._publisher.info('audio', `${type}-devices-set`, {\n        audio_device_ids: sinkIds,\n      }, this._activeConnection);\n    }, error => {\n      this._publisher.error('audio', `${type}-devices-set-failed`, {\n        audio_device_ids: sinkIds,\n        message: error.message,\n      }, this._activeConnection);\n\n      throw error;\n    });\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the non-ringtone sounds\n   * and Call audio through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSpeakerSinkIds(sinkIds: string[]): Promise<void> {\n    Array.from(this.soundcache.entries())\n      .filter(entry => entry[0] !== Device.SoundName.Incoming)\n      .forEach(entry => entry[1].setSinkIds(sinkIds));\n\n    this._connectionSinkIds = sinkIds;\n    const connection = this._activeConnection;\n    return connection\n      ? connection._setSinkIds(sinkIds)\n      : Promise.resolve();\n  }\n\n  /**\n   * Register the {@link Device}\n   * @param token\n   */\n  private register(token: string): void {\n    if (this.stream) {\n      this.stream.setToken(token);\n      this._publisher.setToken(token);\n    } else {\n      this._setupStream(token);\n    }\n  }\n}\n\nnamespace Device {\n  /**\n   * Emitted when an incoming {@link Connection} is canceled.\n   * @param connection - The canceled {@link Connection}.\n   * @example `device.on('cancel', connection => { })`\n   * @event\n   */\n  declare function cancelEvent(connection: Connection): void;\n\n  /**\n   * Emitted when a {@link Connection} has been opened.\n   * @param connection - The {@link Connection} that was opened.\n   * @example `device.on('connect', connection => { })`\n   * @event\n   */\n  declare function connectEvent(connection: Connection): void;\n\n  /**\n   * Emitted when a {@link Connection} has been disconnected.\n   * @param connection - The {@link Connection} that was disconnected.\n   * @example `device.on('disconnect', connection => { })`\n   * @event\n   */\n  declare function disconnectEvent(connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Device} receives an error.\n   * @param error\n   * @example `device.on('error', connection => { })`\n   * @event\n   */\n  declare function errorEvent(error: Connection): void;\n\n  /**\n   * Emitted when an incoming {@link Connection} is received.\n   * @param connection - The incoming {@link Connection}.\n   * @example `device.on('incoming', connection => { })`\n   * @event\n   */\n  declare function incomingEvent(connection: Connection): void;\n\n  /**\n   * Emitted when the {@link Device} goes offline.\n   * @param device\n   * @example `device.on('offline', device => { })`\n   * @event\n   */\n  declare function offlineEvent(device: Device): void;\n\n  /**\n   * Emitted when the {@link Device} is connected to signaling and ready.\n   * @param device\n   * @example `device.on('ready', device => { })`\n   * @event\n   */\n  declare function readyEvent(device: Device): void;\n\n  /**\n   * All valid {@link Device} event names.\n   */\n  export enum EventName {\n    Cancel = 'cancel',\n    Connect = 'connect',\n    Disconnect = 'disconnect',\n    Error = 'error',\n    Incoming = 'incoming',\n    Offline = 'offline',\n    Ready = 'ready',\n  }\n\n  /**\n   * All possible {@link Device} statuses.\n   */\n  export enum Status {\n    Busy = 'busy',\n    Offline = 'offline',\n    Ready = 'ready',\n  }\n\n  /**\n   * Names of all sounds handled by the {@link Device}.\n   */\n  export enum SoundName {\n    Incoming = 'incoming',\n    Outgoing = 'outgoing',\n    Disconnect = 'disconnect',\n    Dtmf0 = 'dtmf0',\n    Dtmf1 = 'dtmf1',\n    Dtmf2 = 'dtmf2',\n    Dtmf3 = 'dtmf3',\n    Dtmf4 = 'dtmf4',\n    Dtmf5 = 'dtmf5',\n    Dtmf6 = 'dtmf6',\n    Dtmf7 = 'dtmf7',\n    Dtmf8 = 'dtmf8',\n    Dtmf9 = 'dtmf9',\n    DtmfS = 'dtmfs',\n    DtmfH = 'dtmfh',\n  }\n\n  /**\n   * Names of all togglable sounds.\n   */\n  export type ToggleableSound = Device.SoundName.Incoming | Device.SoundName.Outgoing | Device.SoundName.Disconnect;\n\n  /**\n   * Options that may be passed to the {@link Device} constructor, or Device.setup via public API\n   */\n  export interface Options {\n    [key: string]: any;\n\n    /**\n     * Whether the Device should raise the {@link incomingEvent} event when a new call invite is\n     * received while already on an active call. Default behavior is false.\n     */\n    allowIncomingWhileBusy?: boolean;\n\n    /**\n     * Audio Constraints to pass to getUserMedia when making or accepting a Call.\n     * This is placed directly under `audio` of the MediaStreamConstraints object.\n     */\n    audioConstraints?: MediaTrackConstraints | boolean;\n\n    /**\n     * Whether to enable close protection, to prevent users from accidentally\n     * navigating away from the page during a call. If string, the value will\n     * be used as a custom message.\n     */\n    closeProtection?: boolean | string;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Connection.Codec[];\n\n    /**\n     * Whether to enable debug logging.\n     */\n    debug?: boolean;\n\n    /**\n     * Whether AudioContext sounds should be disabled. Useful for trouble shooting sound issues\n     * that may be caused by AudioContext-specific sounds. If set to true, will fall back to\n     * HTMLAudioElement sounds.\n     */\n    disableAudioContextSounds?: boolean;\n\n    /**\n     * Whether to use googDscp in RTC constraints.\n     */\n    dscp?: boolean;\n\n    /**\n     * Whether the ringing state should be enabled on {@link Connection} objects. This is required\n     * to enable answerOnBridge functionality.\n     */\n    enableRingingState?: boolean;\n\n    /**\n     * Whether or not to override the local DTMF sounds with fake dialtones. This won't affect\n     * the DTMF tone sent over the connection, but will prevent double-send issues caused by\n     * using real DTMF tones for user interface. In 2.0, this will be enabled by default.\n     */\n    fakeLocalDTMF?: boolean;\n\n    /**\n     * The region code of the region to connect to.\n     */\n    region?: Region;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * A mapping of custom sound URLs by sound name.\n     */\n    sounds?: Partial<Record<Device.SoundName, string>>;\n\n    /**\n     * Whether to enable warn logging.\n     */\n    warnings?: boolean;\n  }\n}\n\nexport default Device;\n"]}