{"version":3,"file":"dialtonePlayer.js","sourceRoot":"","sources":["../../lib/twilio/dialtonePlayer.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,mCAAgD;AAEhD;;GAEG;AACH,IAAM,eAAe,GAAsC;IACzD,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC;CACnB,CAAC;AAEF;IAME,wBAAoB,QAAsB;QAA1C,iBAWC;QAXmB,aAAQ,GAAR,QAAQ,CAAc;QAL1C;;WAEG;QACH,eAAU,GAAe,EAAE,CAAC;QAG1B,IAAI,CAAC,UAAU,GAAG;YAChB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;SAC3B,CAAC;QAEF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAkB;YACzC,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YAC1B,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gCAAO,GAAP;QACE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAkB;YACzC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,6BAAI,GAAJ,UAAK,KAAa;QAAlB,iBAoBC;QAnBC,IAAM,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,6BAAoB,CAAC,yBAAyB,CAAC,CAAC;SAC3D;QAED,IAAM,WAAW,GAAqB;YACpC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE;SACjC,CAAC;QAEF,WAAW,CAAC,OAAO,CAAC,UAAC,UAA0B,EAAE,CAAS;YACxD,UAAU,CAAC,IAAI,GAAG,MAAwB,CAAC;YAC3C,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5C,UAAU,CAAC,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,UAAU,CAAC,KAAK,EAAE,CAAC;YACnB,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;YACjD,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAM,OAAA,UAAU,CAAC,UAAU,EAAE,EAAvB,CAAuB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAAC,AAlDD,IAkDC","sourcesContent":["/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nimport { InvalidArgumentError } from './errors';\n\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nconst bandFrequencies: Partial<Record<string, number[]>> = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960],\n};\n\nexport default class DialtonePlayer {\n  /**\n   * Gain nodes, reducing the frequency.\n   */\n  _gainNodes: GainNode[] = [];\n\n  constructor(private _context: AudioContext) {\n    this._gainNodes = [\n      this._context.createGain(),\n      this._context.createGain(),\n    ];\n\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.connect(this._context.destination);\n      gainNode.gain.value = 0.1;\n      this._gainNodes.push(gainNode);\n    });\n  }\n\n  cleanup(): void {\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.disconnect();\n    });\n  }\n\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  play(sound: string): void {\n    const frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    const oscillators: OscillatorNode[] = [\n      this._context.createOscillator(),\n      this._context.createOscillator(),\n    ];\n\n    oscillators.forEach((oscillator: OscillatorNode, i: number) => {\n      oscillator.type = 'sine' as OscillatorType;\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', () => oscillator.disconnect());\n    });\n  }\n}\n"]}