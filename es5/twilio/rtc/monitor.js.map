{"version":3,"file":"monitor.js","sourceRoot":"","sources":["../../../lib/twilio/rtc/monitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module Voice\n * @internalapi\n */\n\nimport { EventEmitter } from 'events';\nimport RTCSample from './sample';\nimport RTCWarning from './warning';\n\nconst getRTCStats = require('./stats');\nconst Mos = require('./mos');\n\n// How many samples we use when testing metric thresholds\nconst SAMPLE_COUNT_METRICS = 5;\n\n// How many samples that need to cross the threshold to\n// raise or clear a warning.\nconst SAMPLE_COUNT_CLEAR = 0;\nconst SAMPLE_COUNT_RAISE = 3;\n\nconst SAMPLE_INTERVAL = 1000;\nconst WARNING_TIMEOUT = 5 * 1000;\n\nconst DEFAULT_THRESHOLDS: RTCMonitor.ThresholdOptions = {\n  bytesReceived: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  bytesSent: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  jitter: { max: 30 },\n  mos: { min: 3 },\n  packetsLostFraction: { max: 1 },\n  rtt: { max: 400 },\n};\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPeerConnection = any;\n\n/**\n * @private\n */\nexport type IRTCStats = any;\n\n/**\n * @private\n */\nexport type IMos = any;\n\n/**\n * Count the number of values that cross the max threshold.\n * @private\n * @param max - The max allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countHigh(max: number, values: number[]): number {\n  return values.reduce((highCount, value) => highCount += (value > max) ? 1 : 0, 0);\n}\n\n/**\n * Count the number of values that cross the min threshold.\n * @private\n * @param min - The minimum allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countLow(min: number, values: number[]): number {\n  return values.reduce((lowCount, value) => lowCount += (value < min) ? 1 : 0, 0);\n}\n\n/**\n * {@link RTCMonitor} polls a peerConnection via PeerConnection.getStats\n * and emits warnings when stats cross the specified threshold values.\n */\nclass RTCMonitor extends EventEmitter {\n  /**\n   * A map of warnings with their raised time\n   */\n  private _activeWarnings: Map<string, RTCMonitor.WarningTimestamp> = new Map();\n\n  /**\n   * A map of stats with the number of exceeded thresholds\n   */\n  private _currentStreaks: Map<string, number> = new Map();\n\n  /**\n   * Method to get stats from a PeerConnection object. Overrides getRTCStats library\n   */\n  private _getRTCStats: (peerConnection: IPeerConnection) => IRTCStats;\n\n  /**\n   * // How many samples we use when testing metric thresholds.\n   */\n  private _maxSampleCount: number;\n\n  /**\n   * For calculating Mos. Overrides Mos library\n   */\n  private _mos: IMos;\n\n  /**\n   * The PeerConnection to monitor.\n   */\n  private _peerConnection: IPeerConnection;\n\n  /**\n   * Sample buffer. Saves most recent samples\n   */\n  private _sampleBuffer: RTCSample[] = [];\n\n  /**\n   * The setInterval id for fetching samples.\n   */\n  private _sampleInterval: NodeJS.Timer;\n\n  /**\n   * Threshold values for {@link RTCMonitor}\n   */\n  private _thresholds: RTCMonitor.ThresholdOptions;\n\n  /**\n   * Whether warnings should be enabled\n   */\n  private _warningsEnabled: boolean = true;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: RTCMonitor.Options) {\n    super();\n\n    options = options || {};\n    this._getRTCStats = options.getRTCStats || getRTCStats;\n    this._mos = options.Mos || Mos;\n    this._peerConnection = options.peerConnection;\n    this._thresholds = {...DEFAULT_THRESHOLDS, ...options.thresholds};\n\n    const thresholdSampleCounts = Object.values(this._thresholds)\n      .map((threshold: RTCMonitor.ThresholdOptions) => threshold.sampleCount)\n      .filter((sampleCount: number | undefined) => !!sampleCount);\n\n    this._maxSampleCount = Math.max(SAMPLE_COUNT_METRICS, ...thresholdSampleCounts);\n\n    if (this._peerConnection) {\n      this.enable(this._peerConnection);\n    }\n  }\n\n  /**\n   * Stop sampling RTC statistics for this {@link RTCMonitor}.\n   * @returns The current {@link RTCMonitor}.\n   */\n  disable(): this {\n    clearInterval(this._sampleInterval);\n    delete this._sampleInterval;\n\n    return this;\n  }\n\n  /**\n   * Disable warnings for this {@link RTCMonitor}.\n   * @returns The current {@link RTCMonitor}.\n   */\n  disableWarnings(): this {\n    if (this._warningsEnabled) {\n      this._activeWarnings.clear();\n    }\n\n    this._warningsEnabled = false;\n    return this;\n  }\n\n  /**\n   * Start sampling RTC statistics for this {@link RTCMonitor}.\n   * @param peerConnection - A PeerConnection to monitor.\n   * @returns The current {@link RTCMonitor}.\n   */\n  enable(peerConnection: IPeerConnection): this {\n    if (peerConnection) {\n      if (this._peerConnection && peerConnection !== this._peerConnection) {\n        throw new Error('Attempted to replace an existing PeerConnection in RTCMonitor.enable');\n      }\n      this._peerConnection = peerConnection;\n    }\n\n    if (!this._peerConnection) {\n      throw new Error('Can not enable RTCMonitor without a PeerConnection');\n    }\n\n    this._sampleInterval = this._sampleInterval ||\n      setInterval(this._fetchSample.bind(this), SAMPLE_INTERVAL);\n\n    return this;\n  }\n\n  /**\n   * Enable warnings for this {@link RTCMonitor}.\n   * @returns The current {@link RTCMonitor}.\n   */\n  enableWarnings(): this {\n    this._warningsEnabled = true;\n    return this;\n  }\n\n  /**\n   * Add a sample to our sample buffer and remove the oldest if we are over the limit.\n   * @param sample - Sample to add\n   */\n  private _addSample(sample: RTCSample): void {\n    const samples = this._sampleBuffer;\n    samples.push(sample);\n\n    // We store 1 extra sample so that we always have (current, previous)\n    // available for all {sampleBufferSize} threshold validations.\n    if (samples.length > this._maxSampleCount) {\n      samples.splice(0, samples.length - this._maxSampleCount);\n    }\n  }\n\n  /**\n   * Clear an active warning.\n   * @param statName - The name of the stat to clear.\n   * @param thresholdName - The name of the threshold to clear\n   * @param [data] - Any relevant sample data.\n   */\n  private _clearWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n    const activeWarning = this._activeWarnings.get(warningId);\n\n    if (!activeWarning || Date.now() - activeWarning.timeRaised < WARNING_TIMEOUT) { return; }\n    this._activeWarnings.delete(warningId);\n\n    this.emit('warning-cleared', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: this._thresholds[statName][thresholdName],\n      },\n    });\n  }\n\n  /**\n   * Create a sample object from a stats object using the previous sample, if available.\n   * @param stats - Stats retrieved from getStatistics\n   * @param [previousSample=null] - The previous sample to use to calculate deltas.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _createSample(stats: IRTCStats, previousSample: RTCSample | null): RTCSample {\n    const previousBytesSent = previousSample && previousSample.totals.bytesSent || 0;\n    const previousBytesReceived = previousSample && previousSample.totals.bytesReceived || 0;\n    const previousPacketsSent = previousSample && previousSample.totals.packetsSent || 0;\n    const previousPacketsReceived = previousSample && previousSample.totals.packetsReceived || 0;\n    const previousPacketsLost = previousSample && previousSample.totals.packetsLost || 0;\n\n    const currentBytesSent = stats.bytesSent - previousBytesSent;\n    const currentBytesReceived = stats.bytesReceived - previousBytesReceived;\n    const currentPacketsSent = stats.packetsSent - previousPacketsSent;\n    const currentPacketsReceived = stats.packetsReceived - previousPacketsReceived;\n    const currentPacketsLost = stats.packetsLost - previousPacketsLost;\n    const currentInboundPackets = currentPacketsReceived + currentPacketsLost;\n    const currentPacketsLostFraction = (currentInboundPackets > 0) ?\n      (currentPacketsLost / currentInboundPackets) * 100 : 0;\n\n    const totalInboundPackets = stats.packetsReceived + stats.packetsLost;\n    const totalPacketsLostFraction = (totalInboundPackets > 0) ?\n      (stats.packetsLost / totalInboundPackets) * 100 : 100;\n\n    const rttValue = (typeof stats.rtt === 'number' || !previousSample) ? stats.rtt : previousSample.rtt;\n\n    return {\n      bytesReceived: currentBytesReceived,\n      bytesSent: currentBytesSent,\n      codecName: stats.codecName,\n      jitter: stats.jitter,\n      mos: this._mos.calculate(rttValue, stats.jitter, previousSample && currentPacketsLostFraction),\n      packetsLost: currentPacketsLost,\n      packetsLostFraction: currentPacketsLostFraction,\n      packetsReceived: currentPacketsReceived,\n      packetsSent: currentPacketsSent,\n      rtt: rttValue,\n      timestamp: stats.timestamp,\n      totals: {\n        bytesReceived: stats.bytesReceived,\n        bytesSent: stats.bytesSent,\n        packetsLost: stats.packetsLost,\n        packetsLostFraction: totalPacketsLostFraction,\n        packetsReceived: stats.packetsReceived,\n        packetsSent: stats.packetsSent,\n      },\n    };\n  }\n\n  /**\n   * Get stats from the PeerConnection and add it to our list of samples.\n   */\n  private _fetchSample(): void {\n    this._getSample().then(sample => {\n      this._addSample(sample);\n      this._raiseWarnings();\n      this.emit('sample', sample);\n    }).catch(error => {\n      this.disable();\n      this.emit('error', error);\n    });\n  }\n\n  /**\n   * Get stats from the PeerConnection.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _getSample(): Promise<RTCSample> {\n    return this._getRTCStats(this._peerConnection).then((stats: IRTCStats) => {\n      let previousSample = null;\n      if (this._sampleBuffer.length) {\n        previousSample = this._sampleBuffer[this._sampleBuffer.length - 1];\n      }\n\n      return this._createSample(stats, previousSample);\n    });\n  }\n\n  /**\n   * Raise a warning and log its raised time.\n   * @param statName - The name of the stat to raise.\n   * @param thresholdName - The name of the threshold to raise\n   * @param [data] - Any relevant sample data.\n   */\n  private _raiseWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n\n    if (this._activeWarnings.has(warningId)) { return; }\n    this._activeWarnings.set(warningId, { timeRaised: Date.now() });\n\n    this.emit('warning', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: this._thresholds[statName][thresholdName],\n      },\n    });\n  }\n\n  /**\n   * Apply our thresholds to our array of RTCStat samples.\n   */\n  private _raiseWarnings(): void {\n    if (!this._warningsEnabled) { return; }\n\n    Object.keys(this._thresholds).forEach(name => this._raiseWarningsForStat(name));\n  }\n\n  /**\n   * Apply thresholds for a given stat name to our array of\n   * RTCStat samples and raise or clear any associated warnings.\n   * @param statName - Name of the stat to compare.\n   */\n  private _raiseWarningsForStat(statName: string): void {\n    const samples = this._sampleBuffer;\n    const limits = this._thresholds[statName];\n\n    const clearCount = limits.clearCount || SAMPLE_COUNT_CLEAR;\n    const raiseCount = limits.raiseCount || SAMPLE_COUNT_RAISE;\n    const sampleCount = limits.sampleCount || this._maxSampleCount;\n\n    let relevantSamples = samples.slice(-sampleCount);\n    const values = relevantSamples.map(sample => sample[statName]);\n\n    // (rrowland) If we have a bad or missing value in the set, we don't\n    // have enough information to throw or clear a warning. Bail out.\n    const containsNull = values.some(value => typeof value === 'undefined' || value === null);\n\n    if (containsNull) {\n      return;\n    }\n\n    let count;\n    if (typeof limits.max === 'number') {\n      count = countHigh(limits.max, values);\n      if (count >= raiseCount) {\n        this._raiseWarning(statName, 'max', { values });\n      } else if (count <= clearCount) {\n        this._clearWarning(statName, 'max', { values });\n      }\n    }\n\n    if (typeof limits.min === 'number') {\n      count = countLow(limits.min, values);\n      if (count >= raiseCount) {\n        this._raiseWarning(statName, 'min', { values });\n      } else if (count <= clearCount) {\n        this._clearWarning(statName, 'min', { values });\n      }\n    }\n\n    if (typeof limits.maxDuration === 'number' && samples.length > 1) {\n      relevantSamples = samples.slice(-2);\n      const prevValue = relevantSamples[0][statName];\n      const curValue = relevantSamples[1][statName];\n\n      const prevStreak = this._currentStreaks.get(statName) || 0;\n      const streak = (prevValue === curValue) ? prevStreak + 1 : 0;\n\n      this._currentStreaks.set(statName, streak);\n\n      if (streak >= limits.maxDuration) {\n        this._raiseWarning(statName, 'maxDuration', { value: streak });\n      } else if (streak === 0) {\n        this._clearWarning(statName, 'maxDuration', { value: prevStreak });\n      }\n    }\n  }\n}\n\nnamespace RTCMonitor {\n  /**\n   * Config options to be passed to the {@link RTCMonitor} constructor.\n   * @private\n   */\n  export interface Options {\n    /**\n     * Method to get stats from a PeerConnection object\n     */\n    getRTCStats?: (peerConnection: IPeerConnection) => IRTCStats;\n\n    /**\n     * For calculating Mos. Overrides Mos library\n     */\n    Mos?: IMos;\n\n    /**\n     * The PeerConnection to monitor.\n     */\n    peerConnection?: IPeerConnection;\n\n    /**\n     * Optional custom threshold values.\n     */\n    thresholds?: ThresholdOptions;\n  }\n\n  /**\n   * Speficic threshold value for {@link ThresholdOptions}\n   * @private\n   */\n  export interface ThresholdOption {\n    /**\n     * How many samples that need to cross the threshold to clear a warning.\n     * Overrides SAMPLE_COUNT_CLEAR\n     */\n    clearCount?: number;\n\n    /**\n     * Warning will be raised if tracked metric rises above this value.\n     */\n    max?: number;\n\n    /**\n     * Warning will be raised if tracked metric stays constant for\n     * the specified number of consequent samples.\n     */\n    maxDuration?: number;\n\n    /**\n     * Warning will be raised if tracked metric falls below this value.\n     */\n    min?: number;\n\n    /**\n     * How many samples that need to cross the threshold to raise a warning.\n     * Overrides SAMPLE_COUNT_RAISE\n     */\n    raiseCount?: number;\n\n    /**\n     * How many samples we use when testing metric thresholds.\n     * Overrides _maxSampleCount\n     */\n    sampleCount?: number;\n  }\n\n  /**\n   * Threshold values for {@link RTCMonitor}\n   * @private\n   */\n  export interface ThresholdOptions {\n    [key: string]: any;\n\n    /**\n     * Rules to apply to sample.jitter\n     */\n    jitter?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.mos\n     */\n    mos?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.packetsLostFraction\n     */\n    packetsLostFraction?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.rtt\n     */\n    rtt?: ThresholdOption;\n  }\n\n  /**\n   * Timestamp for raised warnings\n   * @private\n   */\n  export interface WarningTimestamp {\n    /**\n     * Timestamp in milliseconds\n     */\n    timeRaised: number;\n  }\n}\n\nexport default RTCMonitor;\n"]}