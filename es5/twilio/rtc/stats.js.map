{"version":3,"file":"stats.js","sourceRoot":"","sources":["../../../lib/twilio/rtc/stats.js"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-fallthrough */\nconst { NotSupportedError, InvalidArgumentError } = require('../errors');\nconst MockRTCStatsReport = require('./mockrtcstatsreport');\n\nconst ERROR_PEER_CONNECTION_NULL = 'PeerConnection is null';\nconst ERROR_WEB_RTC_UNSUPPORTED = 'WebRTC statistics are unsupported';\n\n/**\n * Helper function to find a specific stat from a report.\n * Some environment provide the stats report as a map (regular browsers)\n * but some provide stats report as an array (citrix vdi)\n * @private\n */\nfunction findStatById(report, id) {\n  if (typeof report.get === 'function') {\n    return report.get(id);\n  }\n  return report.find(s => s.id === id);\n}\n\n/**\n * Generate WebRTC statistics report for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCStatsReport>} WebRTC RTCStatsReport object\n */\nfunction getRTCStatsReport(peerConnection) {\n  if (!peerConnection) {\n    return Promise.reject(new InvalidArgumentError(ERROR_PEER_CONNECTION_NULL));\n  }\n\n  if (typeof peerConnection.getStats !== 'function') {\n    return Promise.reject(new NotSupportedError(ERROR_WEB_RTC_UNSUPPORTED));\n  }\n\n  let promise;\n  try {\n    promise = peerConnection.getStats();\n  } catch (e) {\n    promise = new Promise(resolve => peerConnection.getStats(resolve)).then(MockRTCStatsReport.fromRTCStatsResponse);\n  }\n\n  return promise;\n}\n\n/**\n * @typedef {Object} StatsOptions\n * Used for testing to inject and extract methods.\n * @property {function} [createRTCSample] - Method for parsing an RTCStatsReport\n */\n/**\n * Collects any WebRTC statistics for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @param {StatsOptions} options - List of custom options.\n * @return {Promise<RTCSample>} Universally-formatted version of RTC stats.\n */\nfunction getRTCStats(peerConnection, options) {\n  options = Object.assign({\n    createRTCSample\n  }, options);\n\n  return getRTCStatsReport(peerConnection).then(options.createRTCSample);\n}\n\n/**\n * Generate WebRTC stats report containing relevant information about ICE candidates for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCIceCandidateStatsReport>} RTCIceCandidateStatsReport object\n */\nfunction getRTCIceCandidateStatsReport(peerConnection) {\n  return getRTCStatsReport(peerConnection).then((report) => {\n    // Find the relevant information needed to determine selected candidates later\n    const {\n      candidatePairs, localCandidates, remoteCandidates, transport,\n    } = Array.from(report.values()).reduce((rval, stat) => {\n      ['candidatePairs', 'localCandidates', 'remoteCandidates'].forEach((prop) => {\n        if (!rval[prop]) {\n          rval[prop] = [];\n        }\n      });\n\n      switch (stat.type) {\n        case 'candidate-pair':\n          rval.candidatePairs.push(stat);\n          break;\n        case 'local-candidate':\n          rval.localCandidates.push(stat);\n          break;\n        case 'remote-candidate':\n          rval.remoteCandidates.push(stat);\n          break;\n        case 'transport':\n          // This transport is the one being used if selectedCandidatePairId is populated\n          if (stat.selectedCandidatePairId) {\n            rval.transport = stat;\n          }\n          break;\n      }\n\n      return rval;\n    }, {});\n\n    // This is a report containing information about the selected candidates, such as IDs\n    // This is coming from WebRTC stats directly and doesn't contain the actual ICE Candidates info\n    const selectedCandidatePairReport = candidatePairs.find(pair =>\n      // Firefox\n      pair.selected ||\n      // Spec-compliant way\n      (transport && pair.id === transport.selectedCandidatePairId)\n    );\n\n    let selectedIceCandidatePairStats;\n    if (selectedCandidatePairReport) {\n      selectedIceCandidatePairStats = {\n        localCandidate: localCandidates.find(candidate => candidate.id === selectedCandidatePairReport.localCandidateId),\n        remoteCandidate: remoteCandidates.find(candidate => candidate.id === selectedCandidatePairReport.remoteCandidateId),\n      };\n    }\n\n    // Build the return object\n    return {\n      iceCandidateStats: [...localCandidates, ...remoteCandidates],\n      selectedIceCandidatePairStats,\n    };\n  });\n}\n\n/**\n * @typedef {Object} RTCSample - A sample containing relevant WebRTC stats information.\n * @property {Number} [timestamp]\n * @property {String} [codecName] - MimeType name of the codec being used by the outbound audio stream\n * @property {Number} [rtt] - Round trip time\n * @property {Number} [jitter]\n * @property {Number} [packetsSent]\n * @property {Number} [packetsLost]\n * @property {Number} [packetsReceived]\n * @property {Number} [bytesReceived]\n * @property {Number} [bytesSent]\n * @property {Number} [localAddress]\n * @property {Number} [remoteAddress]\n */\nfunction RTCSample() { }\n\n/**\n * Create an RTCSample object from an RTCStatsReport\n * @private\n * @param {RTCStatsReport} statsReport\n * @returns {RTCSample}\n */\nfunction createRTCSample(statsReport) {\n  let activeTransportId = null;\n  const sample = new RTCSample();\n  let fallbackTimestamp;\n\n  Array.from(statsReport.values()).forEach(stats => {\n    // Skip isRemote tracks which will be phased out completely and break in FF66.\n    if (stats.isRemote) { return; }\n\n    // Firefox hack -- Older firefox doesn't have dashes in type names\n    const type = stats.type.replace('-', '');\n\n    fallbackTimestamp = fallbackTimestamp || stats.timestamp;\n\n    // (rrowland) As I understand it, this is supposed to come in on remote-inbound-rtp but it's\n    // currently coming in on remote-outbound-rtp, so I'm leaving this outside the switch until\n    // the appropriate place to look is cleared up.\n    if (stats.remoteId) {\n      const remote = findStatById(statsReport, stats.remoteId);\n      if (remote && remote.roundTripTime) {\n        sample.rtt = remote.roundTripTime * 1000;\n      }\n    }\n\n    switch (type) {\n      case 'inboundrtp':\n        sample.timestamp = sample.timestamp || stats.timestamp;\n        sample.jitter = stats.jitter * 1000;\n        sample.packetsLost = stats.packetsLost;\n        sample.packetsReceived = stats.packetsReceived;\n        sample.bytesReceived = stats.bytesReceived;\n\n        break;\n      case 'outboundrtp':\n        sample.timestamp = stats.timestamp;\n        sample.packetsSent = stats.packetsSent;\n        sample.bytesSent = stats.bytesSent;\n\n        if (stats.codecId) {\n          const codec = findStatById(statsReport, stats.codecId);\n          sample.codecName = codec\n            ? codec.mimeType && codec.mimeType.match(/(.*\\/)?(.*)/)[2]\n            : stats.codecId;\n        }\n\n        break;\n      case 'transport':\n        activeTransportId = stats.id;\n        break;\n    }\n  });\n\n  if (!sample.timestamp) {\n    sample.timestamp = fallbackTimestamp;\n  }\n\n  const activeTransport = findStatById(statsReport, activeTransportId);\n  if (!activeTransport) { return sample; }\n\n  const selectedCandidatePair = findStatById(statsReport, activeTransport.selectedCandidatePairId);\n  if (!selectedCandidatePair) { return sample; }\n\n  const localCandidate = findStatById(statsReport, selectedCandidatePair.localCandidateId);\n  const remoteCandidate = findStatById(statsReport, selectedCandidatePair.remoteCandidateId);\n\n  if (!sample.rtt) {\n    sample.rtt = selectedCandidatePair &&\n      (selectedCandidatePair.currentRoundTripTime * 1000);\n  }\n\n  Object.assign(sample, {\n    localAddress: localCandidate && localCandidate.ip,\n    remoteAddress: remoteCandidate && remoteCandidate.ip,\n  });\n\n  return sample;\n}\n\nmodule.exports = {\n  getRTCStats,\n  getRTCIceCandidateStatsReport,\n};\n"]}