{"version":3,"file":"preflight.js","sourceRoot":"","sources":["../../../lib/twilio/preflight/preflight.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nimport { EventEmitter } from 'events';\nimport Connection from '../connection';\nimport Device from '../device';\nimport { NotSupportedError } from '../errors';\nimport { RTCSampleTotals } from '../rtc/sample';\nimport RTCSample from '../rtc/sample';\nimport { getRTCIceCandidateStatsReport } from '../rtc/stats';\nimport RTCWarning from '../rtc/warning';\nimport StatsMonitor from '../statsMonitor';\nimport { NetworkTiming, TimeMeasurement } from './timing';\n\nconst { COWBELL_AUDIO_URL, ECHO_TEST_DURATION } = require('../constants');\n\n/**\n * Placeholder until we convert peerconnection.js to TypeScript.\n * Represents the audio output object coming from Client SDK's PeerConnection object.\n * @internalapi\n */\nexport interface AudioOutput {\n  /**\n   * The audio element used to play out the sound.\n   */\n  audio: HTMLAudioElement;\n}\n\nexport declare interface PreflightTest {\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Completed]].\n   * During this time, [[PreflightTest.report]] is available and ready to be inspected.\n   * In some cases, this will not trigger if the test encounters a fatal error prior connecting to Twilio.\n   * See [[PreflightTest.failedEvent]].\n   * @param report\n   * @example `preflight.on('completed', report => console.log(report))`\n   * @event\n   */\n  completedEvent(report: PreflightTest.Report): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Connected]].\n   * @example `preflight.on('connected', () => console.log('Test connected'))`\n   * @event\n   */\n  connectedEvent(): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Failed]].\n   * This happens when establishing a connection to Twilio has failed or when a test call has encountered a fatal error.\n   * This is also raised if [[PreflightTest.stop]] is called while the test is in progress.\n   * @param error\n   * @example `preflight.on('failed', error => console.log(error))`\n   * @event\n   */\n  failedEvent(error: Device.Error | DOMError): void;\n\n  /**\n   * Raised when the [[Connection]] gets a webrtc sample object. This event is published every second.\n   * @param sample\n   * @example `preflight.on('sample', sample => console.log(sample))`\n   * @event\n   */\n  sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Raised whenever the [[Connection]] encounters a warning.\n   * @param name - The name of the warning.\n   * @example `preflight.on('warning', (name, data) => console.log({ name, data }))`\n   * @event\n   */\n  warningEvent(name: string, data: PreflightTest.Warning): void;\n}\n\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\nexport class PreflightTest extends EventEmitter {\n  /**\n   * Callsid generated for this test call\n   */\n  private _callSid: string | undefined;\n\n  /**\n   * The {@link Connection} for this test call\n   */\n  private _connection: Connection;\n\n  /**\n   * The {@link Device} for this test call\n   */\n  private _device: Device;\n\n  /**\n   * The timer when doing an echo test\n   * The echo test is used when fakeMicInput is set to true\n   */\n  private _echoTimer: NodeJS.Timer;\n\n  /**\n   * The edge that the `Twilio.Device` connected to.\n   */\n  private _edge: string | undefined;\n\n  /**\n   * End of test timestamp\n   */\n  private _endTime: number | undefined;\n\n  /**\n   * Whether this test has already logged an insights-connection-warning.\n   */\n  private _hasInsightsErrored: boolean = false;\n\n  /**\n   * Latest WebRTC sample collected for this test\n   */\n  private _latestSample: RTCSample | undefined;\n\n  /**\n   * Network related timing measurements for this test\n   */\n  private _networkTiming: NetworkTiming = {};\n\n  /**\n   * The options passed to {@link PreflightTest} constructor\n   */\n  private _options: PreflightTest.ExtendedOptions = {\n    codecPreferences: [Connection.Codec.PCMU, Connection.Codec.Opus],\n    debug: false,\n    edge: 'roaming',\n    fakeMicInput: false,\n    signalingTimeoutMs: 10000,\n  };\n\n  /**\n   * The report for this test.\n   */\n  private _report: PreflightTest.Report | undefined;\n\n  /**\n   * The WebRTC ICE candidates stats information collected during the test\n   */\n  private _rtcIceCandidateStatsReport: PreflightTest.RTCIceCandidateStatsReport;\n\n  /**\n   * WebRTC samples collected during this test\n   */\n  private _samples: RTCSample[];\n\n  /**\n   * Timer for setting up signaling connection\n   */\n  private _signalingTimeoutTimer: number;\n\n  /**\n   * Start of test timestamp\n   */\n  private _startTime: number;\n\n  /**\n   * Current status of this test\n   */\n  private _status: PreflightTest.Status = PreflightTest.Status.Connecting;\n\n  /**\n   * List of warning names and warning data detected during this test\n   */\n  private _warnings: PreflightTest.Warning[];\n\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @constructor\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n  constructor(token: string, options: PreflightTest.ExtendedOptions) {\n    super();\n\n    Object.assign(this._options, options);\n\n    this._samples = [];\n    this._warnings = [];\n    this._startTime = Date.now();\n\n    this._initDevice(token, {\n      ...this._options,\n      fileInputStream: this._options.fakeMicInput ?\n        this._getStreamFromFile() : undefined,\n    });\n  }\n\n  /**\n   * Stops the current test and raises a failed event.\n   */\n  stop(): void {\n    const error: Device.Error = {\n      code: 31008,\n      message: 'Call cancelled',\n    };\n    if (this._device) {\n      this._device.once('offline', () => this._onFailed(error));\n      this._device.destroy();\n    } else {\n      this._onFailed(error);\n    }\n  }\n\n  /**\n   * Emit a {PreflightTest.Warning}\n   */\n  private _emitWarning(name: string, description: string, rtcWarning?: RTCWarning): void {\n    const warning: PreflightTest.Warning = { name, description };\n    if (rtcWarning) {\n      warning.rtcWarning = rtcWarning;\n    }\n    this._warnings.push(warning);\n    this.emit(PreflightTest.Events.Warning, warning);\n  }\n\n  /**\n   * Returns call quality base on the RTC Stats\n   */\n  private _getCallQuality(mos: number): PreflightTest.CallQuality {\n    if (mos > 4.2) {\n      return PreflightTest.CallQuality.Excellent;\n    } else if (mos >= 4.1 && mos <= 4.2) {\n      return PreflightTest.CallQuality.Great;\n    } else if (mos >= 3.7 && mos <= 4) {\n      return PreflightTest.CallQuality.Good;\n    } else if (mos >= 3.1 && mos <= 3.6) {\n      return PreflightTest.CallQuality.Fair;\n    } else {\n      return PreflightTest.CallQuality.Degraded;\n    }\n  }\n\n  /**\n   * Returns the report for this test.\n   */\n  private _getReport(): PreflightTest.Report {\n    const stats = this._getRTCStats();\n    const testTiming: TimeMeasurement = { start: this._startTime };\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration  = this._endTime - this._startTime;\n    }\n\n    const report: PreflightTest.Report = {\n      callSid: this._callSid,\n      edge: this._edge,\n      iceCandidateStats: this._rtcIceCandidateStatsReport.iceCandidateStats,\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      selectedEdge: this._options.edge,\n      stats,\n      testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings,\n    };\n\n    const selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport.selectedIceCandidatePairStats;\n\n    if (selectedIceCandidatePairStats) {\n      report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n      report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === 'relay'\n      || selectedIceCandidatePairStats.remoteCandidate.candidateType === 'relay';\n    }\n\n    if (stats) {\n      report.callQuality = this._getCallQuality(stats.mos.average);\n    }\n\n    return report;\n  }\n\n  /**\n   * Returns RTC stats totals for this test\n   */\n  private _getRTCSampleTotals(): RTCSampleTotals | undefined {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return { ...this._latestSample.totals };\n  }\n\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n  private _getRTCStats(): PreflightTest.RTCStats | undefined {\n    const firstMosSampleIdx = this._samples.findIndex(\n      sample => typeof sample.mos === 'number' && sample.mos > 0,\n    );\n\n    const samples = firstMosSampleIdx >= 0\n      ? this._samples.slice(firstMosSampleIdx)\n      : [];\n\n    if (!samples || !samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce((statObj, stat) => {\n      const values = samples.map(s => s[stat]);\n      return {\n        ...statObj,\n        [stat]: {\n          average: Number((values.reduce((total, value) => total + value) / values.length).toPrecision(5)),\n          max: Math.max(...values),\n          min: Math.min(...values),\n        },\n      };\n    }, {} as any);\n  }\n\n  /**\n   * Returns a MediaStream from a media file\n   */\n  private _getStreamFromFile(): MediaStream {\n    const audioContext = this._options.audioContext;\n    if (!audioContext) {\n      throw new NotSupportedError('Cannot fake input audio stream: AudioContext is not supported by this browser.');\n    }\n\n    const audioEl: any = new Audio(COWBELL_AUDIO_URL);\n\n    audioEl.addEventListener('canplaythrough', () => audioEl.play());\n    if (typeof audioEl.setAttribute === 'function') {\n      audioEl.setAttribute('crossorigin', 'anonymous');\n    }\n\n    const src = audioContext.createMediaElementSource(audioEl);\n    const dest = audioContext.createMediaStreamDestination();\n    src.connect(dest);\n\n    return dest.stream;\n  }\n\n  /**\n   * Initialize the device\n   */\n  private _initDevice(token: string, options: PreflightTest.ExtendedOptions): void {\n    try {\n      this._device = new (options.deviceFactory || Device)(token, {\n        codecPreferences: options.codecPreferences,\n        debug: options.debug,\n        edge: options.edge,\n        fileInputStream: options.fileInputStream,\n        iceServers: options.iceServers,\n        preflight: true,\n        rtcConfiguration: options.rtcConfiguration,\n      });\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(() => {\n        this._onFailed(error);\n      });\n      return;\n    }\n\n    this._device.once('ready', () => {\n      this._onDeviceReady();\n    });\n\n    this._device.once('error', (error: Device.Error) => {\n      this._onDeviceError(error);\n    });\n\n    this._signalingTimeoutTimer = setTimeout(() => {\n      this._onDeviceError({\n        code: 31901,\n        message: 'WebSocket - Connection Timeout',\n      });\n    }, options.signalingTimeoutMs);\n  }\n\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n  private _onDeviceError(error: Device.Error): void {\n    this._device.destroy();\n    this._onFailed(error);\n  }\n\n  /**\n   * Called on {@link Device} ready event\n   */\n  private _onDeviceReady(): void {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n\n    this._connection = this._device.connect();\n    this._networkTiming.signaling = { start: Date.now() };\n    this._setupConnectionHandlers(this._connection);\n\n    this._edge = this._device.edge || undefined;\n    if (this._options.fakeMicInput) {\n      this._echoTimer = setTimeout(() => this._device.disconnectAll(), ECHO_TEST_DURATION);\n\n      const audio = this._device.audio as any;\n      if (audio) {\n        audio.disconnect(false);\n        audio.outgoing(false);\n      }\n    }\n\n    this._device.once('disconnect', () => {\n      this._device.once('offline', () => this._onOffline());\n      this._device.destroy();\n    });\n\n    const publisher = this._connection['_publisher'] as any;\n    publisher.on('error', () => {\n      if (!this._hasInsightsErrored) {\n        this._emitWarning('insights-connection-error',\n          'Received an error when attempting to connect to Insights gateway');\n      }\n      this._hasInsightsErrored = true;\n    });\n  }\n\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n  private _onFailed(error: Device.Error | DOMError): void {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n    this._releaseHandlers();\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this.emit(PreflightTest.Events.Failed, error);\n  }\n\n  /**\n   * Called when the device goes offline.\n   * This indicates that the test has been completed, but we won't know if it failed or not.\n   * The onError event will be the indicator whether the test failed.\n   */\n  private _onOffline(): void {\n    // We need to make sure we always execute preflight.on('completed') last\n    // as client SDK sometimes emits 'offline' event before emitting fatal errors.\n    setTimeout(() => {\n      if (this._status === PreflightTest.Status.Failed) {\n        return;\n      }\n\n      clearTimeout(this._echoTimer);\n      clearTimeout(this._signalingTimeoutTimer);\n\n      this._releaseHandlers();\n      this._endTime = Date.now();\n      this._status = PreflightTest.Status.Completed;\n      this._report = this._getReport();\n      this.emit(PreflightTest.Events.Completed, this._report);\n    }, 10);\n  }\n\n  /**\n   * Clean up all handlers for device and connection\n   */\n  private _releaseHandlers(): void {\n    [this._device, this._connection].forEach((emitter: EventEmitter) => {\n      if (emitter) {\n        emitter.eventNames().forEach((name: string) => emitter.removeAllListeners(name));\n      }\n    });\n  }\n\n  /**\n   * Setup the event handlers for the {@link Connection} of the test call\n   * @param connection\n   */\n  private _setupConnectionHandlers(connection: Connection): void {\n    if (this._options.fakeMicInput) {\n      // When volume events start emitting, it means all audio outputs have been created.\n      // Let's mute them if we're using fake mic input.\n      connection.once('volume', () => {\n        connection.mediaStream.outputs\n          .forEach((output: AudioOutput) => output.audio.muted = true);\n      });\n    }\n\n    connection.on('warning', (name: string, data: RTCWarning) => {\n      this._emitWarning(name, 'Received an RTCWarning. See .rtcWarning for the RTCWarning', data);\n    });\n\n    connection.once('accept', () => {\n      this._callSid = connection.mediaStream.callSid;\n      this._status = PreflightTest.Status.Connected;\n      this.emit(PreflightTest.Events.Connected);\n    });\n\n    connection.on('sample', async (sample) => {\n      // RTC Stats are ready. We only need to get ICE candidate stats report once.\n      if (!this._latestSample) {\n        this._rtcIceCandidateStatsReport = await (\n          this._options.getRTCIceCandidateStatsReport || getRTCIceCandidateStatsReport\n        )(connection.mediaStream.version.pc);\n      }\n\n      this._latestSample = sample;\n      this._samples.push(sample);\n      this.emit(PreflightTest.Events.Sample, sample);\n    });\n\n    // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection',\n     }, {\n      reportLabel: 'ice',\n      type: 'iceconnection',\n     }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport',\n     }, {\n      reportLabel: 'signaling',\n      type: 'signaling',\n     }].forEach(({type, reportLabel}) => {\n\n      const handlerName = `on${type}statechange`;\n      const originalHandler = connection.mediaStream[handlerName];\n\n      connection.mediaStream[handlerName] = (state: string) => {\n        const timing = (this._networkTiming as any)[reportLabel]\n          = (this._networkTiming as any)[reportLabel] || { start: 0 };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if ((state === 'connected' || state === 'stable') && !timing.duration) {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  }\n\n  /**\n   * The callsid generated for the test call.\n   */\n  get callSid(): string | undefined {\n    return this._callSid;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test ended.\n   */\n  get endTime(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * The latest WebRTC sample collected.\n   */\n  get latestSample(): RTCSample | undefined {\n    return this._latestSample;\n  }\n\n  /**\n   * The report for this test.\n   */\n  get report(): PreflightTest.Report | undefined {\n    return this._report;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test started.\n   */\n  get startTime(): number {\n    return this._startTime;\n  }\n\n  /**\n   * The status of the test.\n   */\n  get status(): PreflightTest.Status {\n    return this._status;\n  }\n}\n\nexport namespace PreflightTest {\n  /**\n   * The quality of the call determined by different mos ranges.\n   * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n   */\n  export enum CallQuality {\n    /**\n     * If the average mos is over 4.2.\n     */\n    Excellent = 'excellent',\n\n    /**\n     * If the average mos is between 4.1 and 4.2 both inclusive.\n     */\n    Great = 'great',\n\n    /**\n     * If the average mos is between 3.7 and 4.0 both inclusive.\n     */\n    Good = 'good',\n\n    /**\n     * If the average mos is between 3.1 and 3.6 both inclusive.\n     */\n    Fair = 'fair',\n\n    /**\n     * If the average mos is 3.0 or below.\n     */\n    Degraded = 'degraded',\n  }\n\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n  export enum Events {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Completed = 'completed',\n\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n    Connected = 'connected',\n\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n    Failed = 'failed',\n\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n    Sample = 'sample',\n\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n    Warning = 'warning',\n  }\n\n  /**\n   * Possible status of the test.\n   */\n  export enum Status {\n    /**\n     * Connection to Twilio has initiated.\n     */\n    Connecting = 'connecting',\n\n    /**\n     * Connection to Twilio has been established.\n     */\n    Connected = 'connected',\n\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n    Completed = 'completed',\n\n    /**\n     * The test has stopped and failed.\n     */\n    Failed = 'failed',\n  }\n\n  /**\n   * The WebRTC API's [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n   * dictionary which provides information related to an ICE candidate.\n   */\n  export type RTCIceCandidateStats = any;\n\n  /**\n   * Options that may be passed to {@link PreflightTest} constructor for internal testing.\n   * @internalapi\n   */\n  export interface ExtendedOptions extends Options {\n    /**\n     * The AudioContext instance to use\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * Device class to use.\n     */\n    deviceFactory?: new (token: string, options: Device.Options) => Device;\n\n    /**\n     * File input stream to use instead of reading from mic\n     */\n    fileInputStream?: MediaStream;\n\n    /**\n     * The getRTCIceCandidateStatsReport to use for testing.\n     */\n    getRTCIceCandidateStatsReport?: Function;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor during `Device.setup`.\n     */\n    rtcConfiguration?: RTCConfiguration;\n  }\n\n  /**\n   * A WebRTC stats report containing relevant information about selected and gathered ICE candidates\n   */\n  export interface RTCIceCandidateStatsReport {\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n  }\n\n  /**\n   * Options passed to {@link PreflightTest} constructor.\n   */\n  export interface Options {\n    /**\n     * An ordered array of codec names that will be used during the test call,\n     * from most to least preferred.\n     * @default ['pcmu','opus']\n     */\n    codecPreferences?: Connection.Codec[];\n\n    /**\n     * Whether to enable debug logging.\n     * @default false\n     */\n    debug?: boolean;\n\n    /**\n     * Specifies which Twilio Data Center to use when initiating the test call.\n     * Please see this\n     * [page](https://www.twilio.com/docs/voice/client/edges)\n     * for the list of available edges.\n     * @default roaming\n     */\n    edge?: string;\n\n    /**\n     * If set to `true`, the test call will ignore microphone input and will use a default audio file.\n     * If set to `false`, the test call will capture the audio from the microphone.\n     * Setting this to `true` is only supported on Chrome and will throw a fatal error on other browsers\n     * @default false\n     */\n    fakeMicInput?: boolean;\n\n    /**\n     * An array of custom ICE servers to use to connect media. If you provide both STUN and TURN server configurations,\n     * the test will detect whether a TURN server is required to establish a connection.\n     *\n     * The following example demonstrates how to use [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn)\n     * to generate STUN/TURN credentials and how to specify a specific [edge location](https://www.twilio.com/docs/global-infrastructure/edge-locations).\n     *\n     * ```ts\n     * import Client from 'twilio';\n     * import { Device } from 'twilio-client';\n     *\n     * // Generate the STUN and TURN server credentials with a ttl of 120 seconds\n     * const client = Client(twilioAccountSid, authToken);\n     * const token = await client.tokens.create({ ttl: 120 });\n     *\n     * let iceServers = token.iceServers;\n     *\n     * // By default, global will be used as the default edge location.\n     * // You can replace global with a specific edge name for each of the iceServer configuration.\n     * iceServers = iceServers.map(config => {\n     *   let { url, urls, ...rest } = config;\n     *   url = url.replace('global', 'ashburn');\n     *   urls = urls.replace('global', 'ashburn');\n     *\n     *   return { url, urls, ...rest };\n     * });\n     *\n     * // Use the TURN credentials using the iceServers parameter\n     * const preflightTest = Device.runPreflight(token, { iceServers });\n     *\n     * // Read from the report object to determine whether TURN is required to connect to media\n     * preflightTest.on('completed', (report) => {\n     *   console.log(report.isTurnRequired);\n     * });\n     * ```\n     *\n     * @default null\n     */\n    iceServers?: RTCIceServer[];\n\n    /**\n     * Amount of time to wait for setting up signaling connection.\n     * @default 10000\n     */\n    signalingTimeoutMs?: number;\n  }\n\n  /**\n   * Represents the WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n   */\n  export interface RTCSelectedIceCandidatePairStats {\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected local ICE candidate.\n     */\n    localCandidate: RTCIceCandidateStats;\n\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected remote ICE candidate.\n     */\n    remoteCandidate: RTCIceCandidateStats;\n  }\n\n  /**\n   * Represents RTC related stats that are extracted from RTC samples.\n   */\n  export interface RTCStats {\n    /**\n     * Packets delay variation.\n     */\n    jitter: Stats;\n\n    /**\n     * Mean opinion score, 1.0 through roughly 4.5.\n     */\n    mos: Stats;\n\n    /**\n     * Round trip time, to the server back to the client.\n     */\n    rtt: Stats;\n  }\n\n  /**\n   * Represents general stats for a specific metric.\n   */\n  export interface Stats {\n    /**\n     * The average value for this metric.\n     */\n    average: number;\n\n    /**\n     * The maximum value for this metric.\n     */\n    max: number;\n\n    /**\n     * The minimum value for this metric.\n     */\n    min: number;\n  }\n\n  /**\n   * Represents the report generated from a {@link PreflightTest}.\n   */\n  export interface Report {\n    /**\n     * The quality of the call determined by different mos ranges.\n     */\n    callQuality?: CallQuality;\n\n    /**\n     * CallSid generaged during the test.\n     */\n    callSid: string | undefined;\n\n    /**\n     * The edge that the test call was connected to.\n     */\n    edge?: string;\n\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * Whether a TURN server is required to connect to media.\n     * This is dependent on the selected ICE candidates, and will be true if either is of type \"relay\",\n     * false if both are of another type, or undefined if there are no selected ICE candidates.\n     * See `PreflightTest.Options.iceServers` for more details.\n     */\n    isTurnRequired?: boolean;\n\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n\n    /**\n     * WebRTC samples collected during the test.\n     */\n    samples: RTCSample[];\n\n    /**\n     * The edge passed to `Device.runPreflight`.\n     */\n    selectedEdge?: string;\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n\n    /**\n     * RTC related stats captured during the test.\n     */\n    stats?: RTCStats;\n\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n\n    /**\n     * Calculated totals in RTC statistics samples.\n     */\n    totals?: RTCSampleTotals;\n\n    /**\n     * List of warning names and warning data detected during this test.\n     */\n    warnings: PreflightTest.Warning[];\n  }\n\n  /**\n   * A warning that can be raised by Preflight, and returned in the Report.warnings field.\n   */\n  export interface Warning {\n    /**\n     * Description of the Warning\n     */\n    description: string;\n    /**\n     * Name of the Warning\n     */\n    name: string;\n    /**\n     * If applicable, the RTCWarning that triggered this warning.\n     */\n    rtcWarning?: RTCWarning;\n  }\n }\n"]}