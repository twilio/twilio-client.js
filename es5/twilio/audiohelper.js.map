{"version":3,"file":"audiohelper.js","sourceRoot":"","sources":["../../lib/twilio/audiohelper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module Voice\n */\nimport { EventEmitter } from 'events';\nimport Device from './device';\nimport OutputDeviceCollection from './outputdevicecollection';\nimport * as defaultMediaDevices from './shims/mediadevices';\nimport Log, { LogLevel } from './tslog';\nimport { average, difference, isFirefox } from './util';\n\nconst MediaDeviceInfoShim = require('./shims/mediadeviceinfo');\n\n/**\n * Aliases for audio kinds, used for labelling.\n * @private\n */\nconst kindAliases: Record<string, string> = {\n  audioinput: 'Audio Input',\n  audiooutput: 'Audio Output',\n};\n\n/**\n * Provides input and output audio-based functionality in one convenient class.\n * @publicapi\n */\nclass AudioHelper extends EventEmitter {\n  /**\n   * The currently set audio constraints set by setAudioConstraints(). Starts as null.\n   */\n  get audioConstraints(): MediaTrackConstraints | null { return this._audioConstraints; }\n\n  /**\n   * A Map of all audio input devices currently available to the browser by their device ID.\n   */\n  availableInputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * A Map of all audio output devices currently available to the browser by their device ID.\n   */\n  availableOutputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * The active input device. Having no inputDevice specified by `setInputDevice()`\n   * will disable input selection related functionality.\n   */\n  get inputDevice(): MediaDeviceInfo | null { return this._inputDevice; }\n\n  /**\n   * The current input stream.\n   */\n  get inputStream(): MediaStream | null { return this._inputStream; }\n\n  /**\n   * False if the browser does not support `HTMLAudioElement.setSinkId()` or\n   * `MediaDevices.enumerateDevices()` and Twilio cannot facilitate output selection functionality.\n   */\n  isOutputSelectionSupported: boolean;\n\n  /**\n   * False if the browser does not support AudioContext and Twilio can not analyse the volume\n   * in real-time.\n   */\n  isVolumeSupported: boolean;\n\n  /**\n   * The current set of output devices that incoming ringtone audio is routed through.\n   * These are the sounds that may play while the user is away from the machine or not wearing\n   * their headset. It is important that this audio is heard. If all specified\n   * devices lost, this Set will revert to contain only the \"default\" device.\n   */\n  ringtoneDevices: OutputDeviceCollection;\n\n  /**\n   * The current set of output devices that call audio (`[voice, outgoing, disconnect, dtmf]`)\n   * is routed through. These are the sounds that are initiated by the user, or played while\n   * the user is otherwise present at the endpoint. If all specified devices are lost,\n   * this Set will revert to contain only the \"default\" device.\n   */\n  speakerDevices: OutputDeviceCollection;\n\n  /**\n   * The currently set audio constraints set by setAudioConstraints().\n   */\n  private _audioConstraints: MediaTrackConstraints | null = null;\n\n  /**\n   * An AudioContext to use.\n   */\n  private _audioContext?: AudioContext;\n\n  /**\n   * The `getUserMedia()` function to use.\n   */\n  private _getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n  /**\n   * The current input device.\n   */\n  private _inputDevice: MediaDeviceInfo | null = null;\n\n  /**\n   * The current input stream.\n   */\n  private _inputStream: MediaStream | null = null;\n\n  /**\n   * An AnalyserNode to use for input volume.\n   */\n  private _inputVolumeAnalyser?: AnalyserNode;\n\n  /**\n   * An MediaStreamSource to use for input volume.\n   */\n  private _inputVolumeSource?: MediaStreamAudioSourceNode;\n\n  /**\n   * Whether the {@link AudioHelper} is currently polling the input stream's volume.\n   */\n  private _isPollingInputVolume: boolean = false;\n\n  /**\n   * An instance of Log to use.\n   */\n  private _log: Log;\n\n  /**\n   * The MediaDevices instance to use.\n   */\n  private _mediaDevices: AudioHelper.MediaDevicesLike | null;\n\n  /**\n   * Called with the new input stream when the active input is changed.\n   */\n  private _onActiveInputChanged: (stream: MediaStream | null) => Promise<void>;\n\n  /**\n   * A record of unknown devices (Devices without labels)\n   */\n  private _unknownDeviceIndexes: Record<string, Record<string, number>> = {\n    audioinput: { },\n    audiooutput: { },\n  };\n\n  /**\n   * @constructor\n   * @private\n   * @param onActiveOutputsChanged - A callback to be called when the user changes the active output devices.\n   * @param onActiveInputChanged - A callback to be called when the user changes the active input device.\n   * @param getUserMedia - The getUserMedia method to use.\n   * @param [options]\n   */\n  constructor(onActiveOutputsChanged: (type: 'ringtone' | 'speaker', outputIds: string[]) => Promise<void>,\n              onActiveInputChanged: (stream: MediaStream | null) => Promise<void>,\n              getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>,\n              options?: AudioHelper.Options) {\n    super();\n\n    options = Object.assign({\n      AudioContext: typeof AudioContext !== 'undefined' && AudioContext,\n      setSinkId: typeof HTMLAudioElement !== 'undefined' && (HTMLAudioElement.prototype as any).setSinkId,\n    }, options);\n\n    this._getUserMedia = getUserMedia;\n    this._log = new Log(options.logLevel || LogLevel.Warn);\n    this._mediaDevices = options.mediaDevices || defaultMediaDevices;\n    this._onActiveInputChanged = onActiveInputChanged;\n\n    const isAudioContextSupported: boolean = !!(options.AudioContext || options.audioContext);\n    const isEnumerationSupported: boolean = !!(this._mediaDevices && this._mediaDevices.enumerateDevices);\n    const isSetSinkSupported: boolean = typeof options.setSinkId === 'function';\n    this.isOutputSelectionSupported = isEnumerationSupported && isSetSinkSupported;\n    this.isVolumeSupported = isAudioContextSupported;\n\n    if (options.enabledSounds) {\n      this._addEnabledSounds(options.enabledSounds);\n    }\n\n    if (this.isVolumeSupported) {\n      this._audioContext = options.audioContext || options.AudioContext && new options.AudioContext();\n      if (this._audioContext) {\n        this._inputVolumeAnalyser = this._audioContext.createAnalyser();\n        this._inputVolumeAnalyser.fftSize = 32;\n        this._inputVolumeAnalyser.smoothingTimeConstant = 0.3;\n      }\n    }\n\n    this.ringtoneDevices = new OutputDeviceCollection('ringtone',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n    this.speakerDevices = new OutputDeviceCollection('speaker',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n\n    this.addListener('newListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStartPollingVolume();\n      }\n    });\n\n    this.addListener('removeListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStopPollingVolume();\n      }\n    });\n\n    this.once('newListener', () => {\n      // NOTE (rrowland): Ideally we would only check isEnumerationSupported here, but\n      //   in at least one browser version (Tested in FF48) enumerateDevices actually\n      //   returns bad data for the listed devices. Instead, we check for\n      //   isOutputSelectionSupported to avoid these quirks that may negatively affect customers.\n      if (!this.isOutputSelectionSupported) {\n        this._log.warn('Warning: This browser does not support audio output selection.');\n      }\n\n      if (!this.isVolumeSupported) {\n        this._log.warn(`Warning: This browser does not support Twilio's volume indicator feature.`);\n      }\n    });\n\n    if (isEnumerationSupported) {\n      this._initializeEnumeration();\n    }\n  }\n\n  /**\n   * Start polling volume if it's supported and there's an input stream to poll.\n   * @private\n   */\n  _maybeStartPollingVolume(): void {\n    if (!this.isVolumeSupported || !this._inputStream) { return; }\n\n    this._updateVolumeSource();\n\n    if (this._isPollingInputVolume || !this._inputVolumeAnalyser) { return; }\n\n    const bufferLength: number = this._inputVolumeAnalyser.frequencyBinCount;\n    const buffer: Uint8Array = new Uint8Array(bufferLength);\n\n    this._isPollingInputVolume = true;\n\n    const emitVolume = (): void => {\n      if (!this._isPollingInputVolume) { return; }\n\n      if (this._inputVolumeAnalyser) {\n        this._inputVolumeAnalyser.getByteFrequencyData(buffer);\n        const inputVolume: number = average(buffer);\n\n        this.emit('inputVolume', inputVolume / 255);\n      }\n\n      requestAnimationFrame(emitVolume);\n    };\n\n    requestAnimationFrame(emitVolume);\n  }\n\n  /**\n   * Stop polling volume if it's currently polling and there are no listeners.\n   * @private\n   */\n  _maybeStopPollingVolume(): void {\n    if (!this.isVolumeSupported) { return; }\n\n    if (!this._isPollingInputVolume || (this._inputStream && this.listenerCount('inputVolume'))) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n      delete this._inputVolumeSource;\n    }\n\n    this._isPollingInputVolume = false;\n  }\n\n  /**\n   * Unbind the listeners from mediaDevices.\n   * @private\n   */\n  _unbind(): void {\n    if (!this._mediaDevices) {\n      throw new Error('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.removeEventListener) {\n      this._mediaDevices.removeEventListener('devicechange', this._updateAvailableDevices);\n      this._mediaDevices.removeEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n  }\n\n  /**\n   * Set the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. Any deviceId specified here will be ignored. Instead, device IDs should\n   * be specified using {@link AudioHelper#setInputDevice}. The returned Promise resolves\n   * when the media is successfully reacquired, or immediately if no input device is set.\n   * @param audioConstraints - The MediaTrackConstraints to apply.\n   */\n  setAudioConstraints(audioConstraints: MediaTrackConstraints): Promise<void> {\n    this._audioConstraints = Object.assign({ }, audioConstraints);\n    delete this._audioConstraints.deviceId;\n\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   */\n  setInputDevice(deviceId: string): Promise<void> {\n    return !isFirefox()\n      ? this._setInputDevice(deviceId, false)\n      : Promise.reject(new Error('Firefox does not currently support opening multiple ' +\n        'audio input tracks simultaneously, even across different tabs. As a result, ' +\n        'Device.audio.setInputDevice is disabled on Firefox until support is added.\\n' +\n        'Related BugZilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324'));\n  }\n\n  /**\n   * Unset the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. The returned Promise resolves when the media is successfully reacquired,\n   * or immediately if no input device is set.\n   */\n  unsetAudioConstraints(): Promise<void> {\n    this._audioConstraints = null;\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Unset the input device, stopping the tracks. This should only be called when not in a connection, and\n   *   will not allow removal of the input device during a live call.\n   */\n  unsetInputDevice(): Promise<void> {\n    if (!this.inputDevice) { return Promise.resolve(); }\n\n    return this._onActiveInputChanged(null).then(() => {\n      this._replaceStream(null);\n      this._inputDevice = null;\n      this._maybeStopPollingVolume();\n    });\n  }\n\n  /**\n   * Merge the passed enabledSounds into {@link AudioHelper}. Currently used to merge the deprecated\n   *   Device.sounds object onto the new {@link AudioHelper} interface. Mutates\n   *   by reference, sharing state between {@link Device} and {@link AudioHelper}.\n   * @param enabledSounds - The initial sound settings to merge.\n   * @private\n   */\n  private _addEnabledSounds(enabledSounds: { [name: string]: boolean }) {\n    function setValue(key: Device.ToggleableSound, value: boolean) {\n      if (typeof value !== 'undefined') {\n        enabledSounds[key] = value;\n      }\n\n      return enabledSounds[key];\n    }\n\n    Object.keys(enabledSounds).forEach(key => {\n      (this as any)[key] = setValue.bind(null, key);\n    });\n  }\n\n  /**\n   * Get the index of an un-labeled Device.\n   * @param mediaDeviceInfo\n   * @returns The index of the passed MediaDeviceInfo\n   */\n  private _getUnknownDeviceIndex(mediaDeviceInfo: MediaDeviceInfo): number {\n    const id: string = mediaDeviceInfo.deviceId;\n    const kind: string = mediaDeviceInfo.kind;\n\n    let index: number = this._unknownDeviceIndexes[kind][id];\n    if (!index) {\n      index = Object.keys(this._unknownDeviceIndexes[kind]).length + 1;\n      this._unknownDeviceIndexes[kind][id] = index;\n    }\n\n    return index;\n  }\n\n  /**\n   * Initialize output device enumeration.\n   */\n  private _initializeEnumeration(): void {\n    if (!this._mediaDevices) {\n      throw new Error('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.addEventListener) {\n      this._mediaDevices.addEventListener('devicechange', this._updateAvailableDevices);\n      this._mediaDevices.addEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n\n    this._updateAvailableDevices().then(() => {\n      if (!this.isOutputSelectionSupported) { return; }\n\n      Promise.all([\n        this.speakerDevices.set('default'),\n        this.ringtoneDevices.set('default'),\n      ]).catch(reason => {\n        this._log.warn(`Warning: Unable to set audio output devices. ${reason}`);\n      });\n    });\n  }\n\n  /**\n   * Remove an input device from inputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostInput = (lostDevice: MediaDeviceInfo): boolean => {\n    if (!this.inputDevice || this.inputDevice.deviceId !== lostDevice.deviceId) {\n      return false;\n    }\n\n    this._replaceStream(null);\n    this._inputDevice = null;\n    this._maybeStopPollingVolume();\n\n    const defaultDevice: MediaDeviceInfo = this.availableInputDevices.get('default')\n      || Array.from(this.availableInputDevices.values())[0];\n\n    if (defaultDevice) {\n      this.setInputDevice(defaultDevice.deviceId);\n    }\n\n    return true;\n  }\n\n  /**\n   * Remove an input device from outputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostOutput = (lostDevice: MediaDeviceInfo): boolean => {\n    const wasSpeakerLost: boolean = this.speakerDevices.delete(lostDevice);\n    const wasRingtoneLost: boolean = this.ringtoneDevices.delete(lostDevice);\n    return wasSpeakerLost || wasRingtoneLost;\n  }\n\n  /**\n   * Stop the tracks on the current input stream before replacing it with the passed stream.\n   * @param stream - The new stream\n   */\n  private _replaceStream(stream: MediaStream | null): void {\n    if (this._inputStream) {\n      this._inputStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    this._inputStream = stream;\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   * @param forceGetUserMedia - If true, getUserMedia will be called even if\n   *   the specified device is already active.\n   */\n  private _setInputDevice(deviceId: string, forceGetUserMedia: boolean): Promise<void> {\n    if (typeof deviceId !== 'string') {\n      return Promise.reject(new Error('Must specify the device to set'));\n    }\n\n    const device: MediaDeviceInfo | undefined = this.availableInputDevices.get(deviceId);\n    if (!device) {\n      return Promise.reject(new Error(`Device not found: ${deviceId}`));\n    }\n\n    if (this._inputDevice && this._inputDevice.deviceId === deviceId && this._inputStream) {\n      if (!forceGetUserMedia) {\n        return Promise.resolve();\n      }\n\n      // If the currently active track is still in readyState `live`, gUM may return the same track\n      // rather than returning a fresh track.\n      this._inputStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    const constraints = { audio: Object.assign({ deviceId: { exact: deviceId } }, this.audioConstraints) };\n    return this._getUserMedia(constraints).then((stream: MediaStream) => {\n      return this._onActiveInputChanged(stream).then(() => {\n        this._replaceStream(stream);\n        this._inputDevice = device;\n        this._maybeStartPollingVolume();\n      });\n    });\n  }\n\n  /**\n   * Update the available input and output devices\n   */\n  private _updateAvailableDevices = (): Promise<void> => {\n    if (!this._mediaDevices) {\n      return Promise.reject('Enumeration not supported');\n    }\n\n    return this._mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audiooutput'),\n        this.availableOutputDevices,\n        this._removeLostOutput);\n\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audioinput'),\n        this.availableInputDevices,\n        this._removeLostInput);\n\n      const defaultDevice = this.availableOutputDevices.get('default')\n        || Array.from(this.availableOutputDevices.values())[0];\n\n      [this.speakerDevices, this.ringtoneDevices].forEach(outputDevices => {\n        if (!outputDevices.get().size && this.availableOutputDevices.size) {\n          outputDevices.set(defaultDevice.deviceId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update a set of devices.\n   * @param updatedDevices - An updated list of available Devices\n   * @param availableDevices - The previous list of available Devices\n   * @param removeLostDevice - The method to call if a previously available Device is\n   *   no longer available.\n   */\n  private _updateDevices(updatedDevices: MediaDeviceInfo[],\n                         availableDevices: Map<string, MediaDeviceInfo>,\n                         removeLostDevice: (lostDevice: MediaDeviceInfo) => boolean): void {\n    const updatedDeviceIds: string[] = updatedDevices.map(d => d.deviceId);\n    const knownDeviceIds: string[] = Array.from(availableDevices.values()).map(d => d.deviceId);\n    const lostActiveDevices: MediaDeviceInfo[] = [];\n\n    // Remove lost devices\n    const lostDeviceIds: string[] = difference(knownDeviceIds, updatedDeviceIds);\n    lostDeviceIds.forEach((lostDeviceId: string) => {\n      const lostDevice: MediaDeviceInfo | undefined = availableDevices.get(lostDeviceId);\n      if (lostDevice) {\n        availableDevices.delete(lostDeviceId);\n        if (removeLostDevice(lostDevice)) { lostActiveDevices.push(lostDevice); }\n      }\n    });\n\n    // Add any new devices, or devices with updated labels\n    let deviceChanged: boolean = false;\n    updatedDevices.forEach(newDevice => {\n      const existingDevice: MediaDeviceInfo | undefined = availableDevices.get(newDevice.deviceId);\n      const newMediaDeviceInfo: MediaDeviceInfo = this._wrapMediaDeviceInfo(newDevice);\n\n      if (!existingDevice || existingDevice.label !== newMediaDeviceInfo.label) {\n        availableDevices.set(newDevice.deviceId, newMediaDeviceInfo);\n        deviceChanged = true;\n      }\n    });\n\n    if (deviceChanged || lostDeviceIds.length) {\n      // Force a new gUM in case the underlying tracks of the active stream have changed. One\n      //   reason this might happen is when `default` is selected and set to a USB device,\n      //   then that device is unplugged or plugged back in. We can't check for the 'ended'\n      //   event or readyState because it is asynchronous and may take upwards of 5 seconds,\n      //   in my testing. (rrowland)\n      if (this.inputDevice !== null && this.inputDevice.deviceId === 'default') {\n        this._log.warn(`Calling getUserMedia after device change to ensure that the \\\n          tracks of the active device (default) have not gone stale.`);\n        this._setInputDevice(this.inputDevice.deviceId, true);\n      }\n\n      this.emit('deviceChange', lostActiveDevices);\n    }\n  }\n\n  /**\n   * Disconnect the old input volume source, and create and connect a new one with the current\n   * input stream.\n   */\n  private _updateVolumeSource(): void {\n    if (!this._inputStream || !this._audioContext || !this._inputVolumeAnalyser) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n    }\n\n    this._inputVolumeSource = this._audioContext.createMediaStreamSource(this._inputStream);\n    this._inputVolumeSource.connect(this._inputVolumeAnalyser);\n  }\n\n  /**\n   * Convert a MediaDeviceInfo to a IMediaDeviceInfoShim.\n   * @param mediaDeviceInfo - The info to convert\n   * @returns The converted shim\n   */\n  private _wrapMediaDeviceInfo(mediaDeviceInfo: MediaDeviceInfo): MediaDeviceInfo {\n    const options: Record<string, string> = {\n      deviceId: mediaDeviceInfo.deviceId,\n      groupId: mediaDeviceInfo.groupId,\n      kind: mediaDeviceInfo.kind,\n      label: mediaDeviceInfo.label,\n    };\n\n    if (!options.label) {\n      if (options.deviceId === 'default') {\n        options.label = 'Default';\n      } else {\n        const index: number = this._getUnknownDeviceIndex(mediaDeviceInfo);\n        options.label = `Unknown ${kindAliases[options.kind]} Device ${index}`;\n      }\n    }\n\n    return new MediaDeviceInfoShim(options) as MediaDeviceInfo;\n  }\n}\n\nnamespace AudioHelper {\n  /**\n   * Emitted when the available set of Devices changes.\n   * @param lostActiveDevices - An array containing any Devices that were previously active\n   * that were lost as a result of this deviceChange event.\n   * @example `device.audio.on('deviceChange', lostActiveDevices => { })`\n   * @event\n   * @private\n   */\n  declare function deviceChangeEvent(lostActiveDevices: MediaDeviceInfo[]): void;\n\n  /**\n   * Emitted on `requestAnimationFrame` (up to 60fps, depending on browser) with\n   *   the current input and output volumes, as a percentage of maximum\n   *   volume, between -100dB and -30dB. Represented by a floating point\n   *   number.\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example `device.audio.on('inputVolume', volume => { })`\n   * @event\n   */\n  declare function inputVolumeEvent(inputVolume: number): void;\n\n  /**\n   * An object like MediaDevices.\n   * @private\n   */\n  export interface MediaDevicesLike {\n    addEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n    enumerateDevices: (...args: any[]) => any;\n    getUserMedia: (...args: any[]) => any;\n    removeEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n  }\n\n  /**\n   * Options that can be passed to the AudioHelper constructor\n   * @private\n   */\n  export interface Options {\n    /**\n     * A custom replacement for the AudioContext constructor.\n     */\n    AudioContext?: typeof AudioContext;\n\n    /**\n     * An existing AudioContext instance to use.\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * A Record of sounds. This is modified by reference, and is used to\n     * maintain backward-compatibility. This should be removed or refactored in 2.0.\n     * TODO: Remove / refactor in 2.0. (CLIENT-5302)\n     */\n    enabledSounds?: Record<Device.ToggleableSound, boolean>;\n\n    /**\n     * Logging level to use.\n     */\n    logLevel?: LogLevel;\n\n    /**\n     * A custom MediaDevices instance to use.\n     */\n    mediaDevices?: AudioHelper.MediaDevicesLike;\n\n    /**\n     * A custom setSinkId function to use.\n     */\n    setSinkId?: (sinkId: string) => Promise<void>;\n  }\n}\n\nexport default AudioHelper;\n"]}