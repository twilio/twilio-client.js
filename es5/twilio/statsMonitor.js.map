{"version":3,"file":"statsMonitor.js","sourceRoot":"","sources":["../../lib/twilio/statsMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport { EventEmitter } from 'events';\nimport { InvalidArgumentError } from './errors';\nimport RTCSample from './rtc/sample';\nimport RTCWarning from './rtc/warning';\nimport { average } from './util';\n\nconst { getRTCStats } = require('./rtc/stats');\nconst Mos = require('./rtc/mos');\n\n// How many samples we use when testing metric thresholds\nconst SAMPLE_COUNT_METRICS = 5;\n\n// How many samples that need to cross the threshold to\n// raise or clear a warning.\nconst SAMPLE_COUNT_CLEAR = 0;\nconst SAMPLE_COUNT_RAISE = 3;\n\nconst SAMPLE_INTERVAL = 1000;\nconst WARNING_TIMEOUT = 5 * 1000;\n\nconst DEFAULT_THRESHOLDS: StatsMonitor.ThresholdOptions = {\n  audioInputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n  audioOutputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n  bytesReceived: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  bytesSent: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  jitter: { max: 30 },\n  mos: { min: 3 },\n  packetsLostFraction: [{\n    max: 1,\n  }, {\n    clearValue: 1,\n    maxAverage: 3,\n    sampleCount: 7,\n  }],\n  rtt: { max: 400 },\n};\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPeerConnection = any;\n\n/**\n * @private\n */\nexport type IRTCStats = any;\n\n/**\n * @private\n */\nexport type IMos = any;\n\n/**\n * Count the number of values that cross the max threshold.\n * @private\n * @param max - The max allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countHigh(max: number, values: number[]): number {\n  return values.reduce((highCount, value) => highCount += (value > max) ? 1 : 0, 0);\n}\n\n/**\n * Count the number of values that cross the min threshold.\n * @private\n * @param min - The minimum allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countLow(min: number, values: number[]): number {\n  return values.reduce((lowCount, value) => lowCount += (value < min) ? 1 : 0, 0);\n}\n\n/**\n * Calculate the standard deviation from a list of numbers.\n * @private\n * @param values The list of numbers to calculate the standard deviation from.\n * @returns The standard deviation of a list of numbers.\n */\nfunction calculateStandardDeviation(values: number[]): number | null {\n  if (values.length <= 0) {\n    return null;\n  }\n\n  const valueAverage: number = values.reduce(\n    (partialSum: number, value: number) => partialSum + value,\n    0,\n  ) / values.length;\n\n  const diffSquared: number[] = values.map(\n    (value: number) => Math.pow(value - valueAverage, 2),\n  );\n\n  const stdDev: number = Math.sqrt(diffSquared.reduce(\n    (partialSum: number, value: number) => partialSum + value,\n    0,\n  ) / diffSquared.length);\n\n  return stdDev;\n}\n\n/**\n * Flatten a set of numerical sample sets into a single array of samples.\n * @param sampleSets\n */\nfunction flattenSamples(sampleSets: number[][]): number[] {\n  return sampleSets.reduce(\n    (flat: number[], current: number[]) => [...flat, ...current],\n    [],\n  );\n}\n\n/**\n * {@link StatsMonitor} polls a peerConnection via PeerConnection.getStats\n * and emits warnings when stats cross the specified threshold values.\n */\nclass StatsMonitor extends EventEmitter {\n  /**\n   * A map of warnings with their raised time\n   */\n  private _activeWarnings: Map<string, StatsMonitor.WarningTimestamp> = new Map();\n\n  /**\n   * A map of stats with the number of exceeded thresholds\n   */\n  private _currentStreaks: Map<string, number> = new Map();\n\n  /**\n   * Method to get stats from a PeerConnection object. Overrides getRTCStats library\n   */\n  private _getRTCStats: (peerConnection: IPeerConnection) => IRTCStats;\n\n  /**\n   * Keeps track of input volumes in the last second\n   */\n  private _inputVolumes: number[] = [];\n\n  /**\n   * How many samples we use when testing metric thresholds.\n   */\n  private _maxSampleCount: number;\n\n  /**\n   * For calculating Mos. Overrides Mos library\n   */\n  private _mos: IMos;\n\n  /**\n   * Keeps track of output volumes in the last second\n   */\n  private _outputVolumes: number[] = [];\n\n  /**\n   * The PeerConnection to monitor.\n   */\n  private _peerConnection: IPeerConnection;\n\n  /**\n   * Sample buffer. Saves most recent samples\n   */\n  private _sampleBuffer: RTCSample[] = [];\n\n  /**\n   * The setInterval id for fetching samples.\n   */\n  private _sampleInterval: NodeJS.Timer;\n\n  /**\n   * Keeps track of supplemental sample values.\n   *\n   * Currently used for constant audio detection. Contains an array of volume\n   * samples for each sample interval.\n   */\n  private _supplementalSampleBuffers: Record<string, number[][]> = {\n    audioInputLevel: [],\n    audioOutputLevel: [],\n  };\n\n  /**\n   * Threshold values for {@link StatsMonitor}\n   */\n  private _thresholds: StatsMonitor.ThresholdOptions;\n\n  /**\n   * Whether warnings should be enabled\n   */\n  private _warningsEnabled: boolean = true;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: StatsMonitor.Options) {\n    super();\n\n    options = options || {};\n    this._getRTCStats = options.getRTCStats || getRTCStats;\n    this._mos = options.Mos || Mos;\n    this._peerConnection = options.peerConnection;\n    this._thresholds = {...DEFAULT_THRESHOLDS, ...options.thresholds};\n\n    const thresholdSampleCounts = Object.values(this._thresholds)\n      .map((threshold: StatsMonitor.ThresholdOptions) => threshold.sampleCount)\n      .filter((sampleCount: number | undefined) => !!sampleCount);\n\n    this._maxSampleCount = Math.max(SAMPLE_COUNT_METRICS, ...thresholdSampleCounts);\n\n    if (this._peerConnection) {\n      this.enable(this._peerConnection);\n    }\n  }\n\n  /**\n   * Called when a volume sample is available\n   * @param inputVolume - Input volume level from 0 to 32767\n   * @param outputVolume - Output volume level from 0 to 32767\n   */\n  addVolumes(inputVolume: number, outputVolume: number): void {\n    this._inputVolumes.push(inputVolume);\n    this._outputVolumes.push(outputVolume);\n  }\n\n  /**\n   * Stop sampling RTC statistics for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  disable(): this {\n    clearInterval(this._sampleInterval);\n    delete this._sampleInterval;\n\n    return this;\n  }\n\n  /**\n   * Disable warnings for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  disableWarnings(): this {\n    if (this._warningsEnabled) {\n      this._activeWarnings.clear();\n    }\n\n    this._warningsEnabled = false;\n    return this;\n  }\n\n  /**\n   * Start sampling RTC statistics for this {@link StatsMonitor}.\n   * @param peerConnection - A PeerConnection to monitor.\n   * @returns The current {@link StatsMonitor}.\n   */\n  enable(peerConnection: IPeerConnection): this {\n    if (peerConnection) {\n      if (this._peerConnection && peerConnection !== this._peerConnection) {\n        throw new InvalidArgumentError('Attempted to replace an existing PeerConnection in StatsMonitor.enable');\n      }\n      this._peerConnection = peerConnection;\n    }\n\n    if (!this._peerConnection) {\n      throw new InvalidArgumentError('Can not enable StatsMonitor without a PeerConnection');\n    }\n\n    this._sampleInterval = this._sampleInterval ||\n      setInterval(this._fetchSample.bind(this), SAMPLE_INTERVAL);\n\n    return this;\n  }\n\n  /**\n   * Enable warnings for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  enableWarnings(): this {\n    this._warningsEnabled = true;\n    return this;\n  }\n\n  /**\n   * Check if there is an active warning for a specific stat and threshold\n   * @param statName - The name of the stat to check\n   * @param thresholdName - The name of the threshold to check\n   * @returns Whether there is an active warning for a specific stat and threshold\n   */\n  hasActiveWarning(statName: string, thresholdName: string): boolean {\n    const warningId = `${statName}:${thresholdName}`;\n    return !!this._activeWarnings.get(warningId);\n  }\n\n  /**\n   * Add a sample to our sample buffer and remove the oldest if we are over the limit.\n   * @param sample - Sample to add\n   */\n  private _addSample(sample: RTCSample): void {\n    const samples = this._sampleBuffer;\n    samples.push(sample);\n\n    // We store 1 extra sample so that we always have (current, previous)\n    // available for all {sampleBufferSize} threshold validations.\n    if (samples.length > this._maxSampleCount) {\n      samples.splice(0, samples.length - this._maxSampleCount);\n    }\n  }\n\n  /**\n   * Clear an active warning.\n   * @param statName - The name of the stat to clear.\n   * @param thresholdName - The name of the threshold to clear\n   * @param [data] - Any relevant sample data.\n   */\n  private _clearWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n    const activeWarning = this._activeWarnings.get(warningId);\n\n    if (!activeWarning || Date.now() - activeWarning.timeRaised < WARNING_TIMEOUT) { return; }\n    this._activeWarnings.delete(warningId);\n\n    this.emit('warning-cleared', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: this._thresholds[statName][thresholdName],\n      },\n    });\n  }\n\n  /**\n   * Create a sample object from a stats object using the previous sample, if available.\n   * @param stats - Stats retrieved from getStatistics\n   * @param [previousSample=null] - The previous sample to use to calculate deltas.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _createSample(stats: IRTCStats, previousSample: RTCSample | null): RTCSample {\n    const previousBytesSent = previousSample && previousSample.totals.bytesSent || 0;\n    const previousBytesReceived = previousSample && previousSample.totals.bytesReceived || 0;\n    const previousPacketsSent = previousSample && previousSample.totals.packetsSent || 0;\n    const previousPacketsReceived = previousSample && previousSample.totals.packetsReceived || 0;\n    const previousPacketsLost = previousSample && previousSample.totals.packetsLost || 0;\n\n    const currentBytesSent = stats.bytesSent - previousBytesSent;\n    const currentBytesReceived = stats.bytesReceived - previousBytesReceived;\n    const currentPacketsSent = stats.packetsSent - previousPacketsSent;\n    const currentPacketsReceived = stats.packetsReceived - previousPacketsReceived;\n    const currentPacketsLost = stats.packetsLost - previousPacketsLost;\n    const currentInboundPackets = currentPacketsReceived + currentPacketsLost;\n    const currentPacketsLostFraction = (currentInboundPackets > 0) ?\n      (currentPacketsLost / currentInboundPackets) * 100 : 0;\n\n    const totalInboundPackets = stats.packetsReceived + stats.packetsLost;\n    const totalPacketsLostFraction = (totalInboundPackets > 0) ?\n      (stats.packetsLost / totalInboundPackets) * 100 : 100;\n\n    const rttValue = (typeof stats.rtt === 'number' || !previousSample) ? stats.rtt : previousSample.rtt;\n\n    const audioInputLevelValues = this._inputVolumes.splice(0);\n    this._supplementalSampleBuffers.audioInputLevel.push(audioInputLevelValues);\n\n    const audioOutputLevelValues = this._outputVolumes.splice(0);\n    this._supplementalSampleBuffers.audioOutputLevel.push(audioOutputLevelValues);\n\n    return {\n      audioInputLevel: Math.round(average(audioInputLevelValues)),\n      audioOutputLevel: Math.round(average(audioOutputLevelValues)),\n      bytesReceived: currentBytesReceived,\n      bytesSent: currentBytesSent,\n      codecName: stats.codecName,\n      jitter: stats.jitter,\n      mos: this._mos.calculate(rttValue, stats.jitter, previousSample && currentPacketsLostFraction),\n      packetsLost: currentPacketsLost,\n      packetsLostFraction: currentPacketsLostFraction,\n      packetsReceived: currentPacketsReceived,\n      packetsSent: currentPacketsSent,\n      rtt: rttValue,\n      timestamp: stats.timestamp,\n      totals: {\n        bytesReceived: stats.bytesReceived,\n        bytesSent: stats.bytesSent,\n        packetsLost: stats.packetsLost,\n        packetsLostFraction: totalPacketsLostFraction,\n        packetsReceived: stats.packetsReceived,\n        packetsSent: stats.packetsSent,\n      },\n    };\n  }\n\n  /**\n   * Get stats from the PeerConnection and add it to our list of samples.\n   */\n  private _fetchSample(): void {\n    this._getSample().then(sample => {\n      this._addSample(sample);\n      this._raiseWarnings();\n      this.emit('sample', sample);\n    }).catch(error => {\n      this.disable();\n      // We only bubble up any errors coming from pc.getStats()\n      // No need to attach a twilioError\n      this.emit('error', error);\n    });\n  }\n\n  /**\n   * Get stats from the PeerConnection.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _getSample(): Promise<RTCSample> {\n    return this._getRTCStats(this._peerConnection).then((stats: IRTCStats) => {\n      let previousSample = null;\n      if (this._sampleBuffer.length) {\n        previousSample = this._sampleBuffer[this._sampleBuffer.length - 1];\n      }\n\n      return this._createSample(stats, previousSample);\n    });\n  }\n\n  /**\n   * Raise a warning and log its raised time.\n   * @param statName - The name of the stat to raise.\n   * @param thresholdName - The name of the threshold to raise\n   * @param [data] - Any relevant sample data.\n   */\n  private _raiseWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n\n    if (this._activeWarnings.has(warningId)) { return; }\n    this._activeWarnings.set(warningId, { timeRaised: Date.now() });\n\n    const thresholds: StatsMonitor.ThresholdOption | StatsMonitor.ThresholdOption[] =\n      this._thresholds[statName];\n\n    let thresholdValue;\n\n    if (Array.isArray(thresholds)) {\n      const foundThreshold = thresholds.find(threshold => thresholdName in threshold);\n      if (foundThreshold) {\n        thresholdValue = foundThreshold[thresholdName as keyof StatsMonitor.ThresholdOption];\n      }\n    } else {\n      thresholdValue = this._thresholds[statName][thresholdName];\n    }\n\n    this.emit('warning', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: thresholdValue,\n      },\n    });\n  }\n\n  /**\n   * Apply our thresholds to our array of RTCStat samples.\n   */\n  private _raiseWarnings(): void {\n    if (!this._warningsEnabled) { return; }\n\n    Object.keys(this._thresholds).forEach(name => this._raiseWarningsForStat(name));\n  }\n\n  /**\n   * Apply thresholds for a given stat name to our array of\n   * RTCStat samples and raise or clear any associated warnings.\n   * @param statName - Name of the stat to compare.\n   */\n  private _raiseWarningsForStat(statName: string): void {\n    const limits: StatsMonitor.ThresholdOptions[] =\n      Array.isArray(this._thresholds[statName])\n        ? this._thresholds[statName]\n        : [this._thresholds[statName]];\n\n    limits.forEach((limit: StatsMonitor.ThresholdOptions) => {\n      const samples = this._sampleBuffer;\n\n      const clearCount = limit.clearCount || SAMPLE_COUNT_CLEAR;\n      const raiseCount = limit.raiseCount || SAMPLE_COUNT_RAISE;\n      const sampleCount = limit.sampleCount || this._maxSampleCount;\n\n      let relevantSamples = samples.slice(-sampleCount);\n      const values = relevantSamples.map(sample => sample[statName]);\n\n      // (rrowland) If we have a bad or missing value in the set, we don't\n      // have enough information to throw or clear a warning. Bail out.\n      const containsNull = values.some(value => typeof value === 'undefined' || value === null);\n\n      if (containsNull) {\n        return;\n      }\n\n      let count;\n      if (typeof limit.max === 'number') {\n        count = countHigh(limit.max, values);\n        if (count >= raiseCount) {\n          this._raiseWarning(statName, 'max', { values, samples: relevantSamples });\n        } else if (count <= clearCount) {\n          this._clearWarning(statName, 'max', { values, samples: relevantSamples });\n        }\n      }\n\n      if (typeof limit.min === 'number') {\n        count = countLow(limit.min, values);\n        if (count >= raiseCount) {\n          this._raiseWarning(statName, 'min', { values, samples: relevantSamples });\n        } else if (count <= clearCount) {\n          this._clearWarning(statName, 'min', { values, samples: relevantSamples });\n        }\n      }\n\n      if (typeof limit.maxDuration === 'number' && samples.length > 1) {\n        relevantSamples = samples.slice(-2);\n        const prevValue = relevantSamples[0][statName];\n        const curValue = relevantSamples[1][statName];\n\n        const prevStreak = this._currentStreaks.get(statName) || 0;\n        const streak = (prevValue === curValue) ? prevStreak + 1 : 0;\n\n        this._currentStreaks.set(statName, streak);\n\n        if (streak >= limit.maxDuration) {\n          this._raiseWarning(statName, 'maxDuration', { value: streak });\n        } else if (streak === 0) {\n          this._clearWarning(statName, 'maxDuration', { value: prevStreak });\n        }\n      }\n\n      if (typeof limit.minStandardDeviation === 'number') {\n        const sampleSets: number[][] = this._supplementalSampleBuffers[statName];\n        if (!sampleSets || sampleSets.length < limit.sampleCount) {\n          return;\n        }\n        if (sampleSets.length > limit.sampleCount) {\n          sampleSets.splice(0, sampleSets.length - limit.sampleCount);\n        }\n        const flatSamples: number[] = flattenSamples(sampleSets.slice(-sampleCount));\n        const stdDev: number | null = calculateStandardDeviation(flatSamples);\n\n        if (typeof stdDev !== 'number') {\n          return;\n        }\n\n        if (stdDev < limit.minStandardDeviation) {\n          this._raiseWarning(statName, 'minStandardDeviation', { value: stdDev });\n        } else {\n          this._clearWarning(statName, 'minStandardDeviation', { value: stdDev });\n        }\n      }\n\n      ([\n        ['maxAverage', (x: number, y: number) => x > y],\n        ['minAverage', (x: number, y: number) => x < y],\n      ] as const).forEach(([thresholdName, comparator]) => {\n        if (typeof limit[thresholdName] === 'number' && values.length >= sampleCount) {\n          const avg: number = average(values);\n\n          if (comparator(avg, limit[thresholdName])) {\n            this._raiseWarning(statName, thresholdName, { values, samples: relevantSamples });\n          } else if (!comparator(avg, limit.clearValue || limit[thresholdName])) {\n            this._clearWarning(statName, thresholdName, { values, samples: relevantSamples });\n          }\n        }\n      });\n    });\n  }\n}\n\nnamespace StatsMonitor {\n  /**\n   * Config options to be passed to the {@link StatsMonitor} constructor.\n   * @private\n   */\n  export interface Options {\n    /**\n     * Method to get stats from a PeerConnection object\n     */\n    getRTCStats?: (peerConnection: IPeerConnection) => IRTCStats;\n\n    /**\n     * For calculating Mos. Overrides Mos library\n     */\n    Mos?: IMos;\n\n    /**\n     * The PeerConnection to monitor.\n     */\n    peerConnection?: IPeerConnection;\n\n    /**\n     * Optional custom threshold values.\n     */\n    thresholds?: ThresholdOptions;\n  }\n\n  /**\n   * Speficic threshold value for {@link ThresholdOptions}\n   * @private\n   */\n  export interface ThresholdOption {\n    /**\n     * How many samples that need to cross the threshold to clear a warning.\n     * Overrides SAMPLE_COUNT_CLEAR\n     */\n    clearCount?: number;\n\n    /**\n     * Used with the `minAverage` and `maxAverage` options. If `maxAverage` is\n     * used, then the warning will be cleared when at or below this value. If\n     * `minAverage` is used, then the warning will be cleared at or above this\n     * value.\n     */\n    clearValue?: number;\n\n    /**\n     * Warning will be raised if tracked metric rises above this value.\n     */\n    max?: number;\n\n    /**\n     * Warning will be raised based on the average over `sampleCount` samples.\n     * The warning is raised if the average is above the `raiseValue` amount and\n     * is cleared when below the `clearValue` amount.\n     */\n    maxAverage?: number;\n\n    /**\n     * Warning will be raised if tracked metric stays constant for\n     * the specified number of consequent samples.\n     */\n    maxDuration?: number;\n\n    /**\n     * Warning will be raised if tracked metric falls below this value.\n     */\n    min?: number;\n\n    /**\n     * Warning will be raised based on the average over `sampleCount` samples.\n     * The warning is raised if the average is below the `raiseValue` amount and\n     * is cleared when above the `clearValue` amount.\n     */\n    minAverage?: number;\n\n    /**\n     * Warning will be raised if the standard deviation of the tracked metric\n     * does not exceed this value.\n     */\n    minStandardDeviation?: number;\n\n    /**\n     * How many samples that need to cross the threshold to raise a warning.\n     * Overrides SAMPLE_COUNT_RAISE\n     */\n    raiseCount?: number;\n\n    /**\n     * How many samples we use when testing metric thresholds.\n     * Overrides _maxSampleCount\n     */\n    sampleCount?: number;\n  }\n\n  /**\n   * Threshold values for {@link StatsMonitor}\n   * @private\n   */\n  export interface ThresholdOptions {\n    [key: string]: any;\n\n    /**\n     * Audio input level between 0 and 32767, representing -100 to -30 dB.\n     */\n    audioInputLevel?: ThresholdOption;\n\n    /**\n     * Audio output level between 0 and 32767, representing -100 to -30 dB.\n     */\n    audioOutputLevel?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.jitter\n     */\n    jitter?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.mos\n     */\n    mos?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.packetsLostFraction\n     */\n    packetsLostFraction?: ThresholdOption[];\n\n    /**\n     * Rules to apply to sample.rtt\n     */\n    rtt?: ThresholdOption;\n  }\n\n  /**\n   * Timestamp for raised warnings\n   * @private\n   */\n  export interface WarningTimestamp {\n    /**\n     * Timestamp in milliseconds\n     */\n    timeRaised: number;\n  }\n}\n\nexport default StatsMonitor;\n"]}