{"version":3,"file":"tslog.js","sourceRoot":"","sources":["../../lib/twilio/tslog.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH;;GAEG;AACH,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,2BAAe,CAAA;IACf,yBAAa,CAAA;IACb,yBAAa,CAAA;IACb,2BAAe,CAAA;AACjB,CAAC,EANW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAMnB;AAED;;GAEG;AACH,IAAM,eAAe;IACnB,GAAC,QAAQ,CAAC,KAAK,IAAG,MAAM;IACxB,GAAC,QAAQ,CAAC,IAAI,IAAG,MAAM;IACvB,GAAC,QAAQ,CAAC,IAAI,IAAG,MAAM;IACvB,GAAC,QAAQ,CAAC,KAAK,IAAG,OAAO;OAC1B,CAAC;AAEF;;GAEG;AACH,IAAM,aAAa;IACjB,GAAC,QAAQ,CAAC,KAAK,IAAG,CAAC;IACnB,GAAC,QAAQ,CAAC,IAAI,IAAG,CAAC;IAClB,GAAC,QAAQ,CAAC,IAAI,IAAG,CAAC;IAClB,GAAC,QAAQ,CAAC,KAAK,IAAG,CAAC;IACnB,GAAC,QAAQ,CAAC,GAAG,IAAG,CAAC;OAClB,CAAC;AAYF;;GAEG;AACH;IAQE;;;OAGG;IACH,aAAoB,SAAmB,EAAE,OAAqB;QAA1C,cAAS,GAAT,SAAS,CAAU;QAXtB,aAAQ,GAAY,OAAO,CAAC;QAY3C,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;SACjC;IACH,CAAC;IAVD,sBAAI,yBAAQ;QAHZ;;WAEG;aACH,cAAiB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;;OAAA;IAYzC;;;OAGG;IACH,mBAAK,GAAL;QAAM,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAClB,IAAI,CAAC,GAAG,OAAR,IAAI,GAAK,QAAQ,CAAC,KAAK,SAAK,IAAI,GAAE;IACpC,CAAC;IAED;;;OAGG;IACH,mBAAK,GAAL;QAAM,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAClB,IAAI,CAAC,GAAG,OAAR,IAAI,GAAK,QAAQ,CAAC,KAAK,SAAK,IAAI,GAAE;IACpC,CAAC;IAED;;;OAGG;IACH,kBAAI,GAAJ;QAAK,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACjB,IAAI,CAAC,GAAG,OAAR,IAAI,GAAK,QAAQ,CAAC,IAAI,SAAK,IAAI,GAAE;IACnC,CAAC;IAED;;;;;;OAMG;IACH,iBAAG,GAAH,UAAI,QAAkB;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACpC,IAAM,UAAU,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,UAAU,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;YACzE,CAAA,KAAC,IAAI,CAAC,QAAgB,CAAA,CAAC,UAAU,CAAC,WAAI,IAAI,EAAE;SAC7C;;IACH,CAAC;IAED;;;OAGG;IACH,yBAAW,GAAX,UAAY,QAAkB;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,kBAAI,GAAJ;QAAK,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACjB,IAAI,CAAC,GAAG,OAAR,IAAI,GAAK,QAAQ,CAAC,IAAI,SAAK,IAAI,GAAE;IACnC,CAAC;IACH,UAAC;AAAD,CAAC,AAvED,IAuEC","sourcesContent":["/**\n * @module Tools\n * @internalapi\n */\n\n/**\n * Valid LogLevels.\n */\nexport enum LogLevel {\n  Off = 'off',\n  Debug = 'debug',\n  Info = 'info',\n  Warn = 'warn',\n  Error = 'error',\n}\n\n/**\n * Methods to call on console to log each LogLevel.\n */\nconst logLevelMethods: Record<string, string> = {\n  [LogLevel.Debug]: 'info',\n  [LogLevel.Info]: 'info',\n  [LogLevel.Warn]: 'warn',\n  [LogLevel.Error]: 'error',\n};\n\n/**\n * Ranking of LogLevel keys to determine which logs to print for a given LogLevel.\n */\nconst logLevelRanks: Record<string, number> = {\n  [LogLevel.Debug]: 0,\n  [LogLevel.Info]: 1,\n  [LogLevel.Warn]: 2,\n  [LogLevel.Error]: 3,\n  [LogLevel.Off]: 4,\n};\n\n/**\n * Valid options for constructing a Log instance.\n */\nexport interface ILogOptions {\n  /**\n   * Override the console object for testing.\n   */\n  console: any;\n}\n\n/**\n * @internalapi\n */\nexport default class Log {\n  private readonly _console: Console = console;\n\n  /**\n   * The current LogLevel threshold.\n   */\n  get logLevel() { return this._logLevel; }\n\n  /**\n   * @param logLevel - The initial LogLevel threshold to display logs for.\n   * @param options\n   */\n  constructor(private _logLevel: LogLevel, options?: ILogOptions) {\n    if (options && options.console) {\n      this._console = options.console;\n    }\n  }\n\n  /**\n   * Log a console.info message if the current LogLevel threshold is 'debug'.\n   * @param args - Any number of arguments to be passed to console.info\n   */\n  debug(...args: any[]): void {\n    this.log(LogLevel.Debug, ...args);\n  }\n\n  /**\n   * Log a console.error message if the current LogLevel threshold is 'error' or lower.\n   * @param args - Any number of arguments to be passed to console.error\n   */\n  error(...args: any[]): void {\n    this.log(LogLevel.Error, ...args);\n  }\n\n  /**\n   * Log a console.info message if the current LogLevel threshold is 'info' or lower.\n   * @param args - Any number of arguments to be passed to console.info\n   */\n  info(...args: any[]): void {\n    this.log(LogLevel.Info, ...args);\n  }\n\n  /**\n   * Log a console message if the current LogLevel threshold is equal to or less than the\n   *   LogLevel specified.\n   * @param logLevel - The LogLevel to compare to the current LogLevel to determine\n   *   whether the log should be printed.\n   * @param args - Any number of arguments to be passed to console\n   */\n  log(logLevel: LogLevel, ...args: any[]): void {\n    const methodName = logLevelMethods[logLevel];\n    if (methodName && logLevelRanks[this.logLevel] <= logLevelRanks[logLevel]) {\n      (this._console as any)[methodName](...args);\n    }\n  }\n\n  /**\n   * Set/update the LogLevel threshold to apply to all future logs.\n   * @param logLevel - The new LogLevel to use as a threshold for logs.\n   */\n  setLogLevel(logLevel: LogLevel): void {\n    this._logLevel = logLevel;\n  }\n\n  /**\n   * Log a console.warn message if the current LogLevel threshold is 'warn' or lower.\n   * @param args - Any number of arguments to be passed to console.warn\n   */\n  warn(...args: any[]): void {\n    this.log(LogLevel.Warn, ...args);\n  }\n}\n"]}