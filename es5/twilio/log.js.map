{"version":3,"file":"log.js","sourceRoot":"","sources":["../../lib/twilio/log.js"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG;AACH,kBAAkB,MAAM,EAAE,MAAM;IAC9B;;;;;;;;;;;;;;;;;;;OAmBG;IACH;QAAa,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QAClB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,IAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAI,GAAG,CAAC,MAAM,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,OAAO,CACT,OAAO,GAAG,KAAK,QAAQ;gBACvB,CAAC,CAAC,MAAM,GAAG,GAAG;gBACd,CAAC,CAAC,GAAG,CACN,CAAC;SACH;IACH,CAAC;IAED,4BAA4B,CAAC;QAC3B,+BAA+B;QAC/B,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;gBACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjB;iBAAM,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;gBAC5C,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;SACF;QACD,8BAA8B;IAChC,CAAC;IAED;QAAoB,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QACzB,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SACtB;IACH,CAAC;IAED,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;IACnB,GAAG,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;IAC1B,cAAc;IACd,GAAG,CAAC,cAAc,GAAG,UAAA,CAAC;QACpB,sCAAsC;QACtC,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAAE;IACzD,CAAC,CAAC;IACF,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC;IACjC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;IACpB,GAAG,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC5C,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,kBAAkB,CAAC;IACzC,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;IAC5B,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC;IAEtB,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB,CAAC;AACD,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC","sourcesContent":["/**\n * Bestow logging powers.\n *\n * @exports mixinLog as Twilio.mixinLog\n * @memberOf Twilio\n *\n * @param {object} object The object to bestow logging powers to\n * @param {string} [prefix] Prefix log messages with this\n *\n * @return {object} Return the object passed in\n */\nfunction mixinLog(object, prefix) {\n  /**\n   * Logs a message or object.\n   *\n   * <p>There are a few options available for the log mixin. Imagine an object\n   * <code>foo</code> with this function mixed in:</p>\n   *\n   * <pre><code>var foo = {};\n   * Twilio.mixinLog(foo);\n   *\n   * </code></pre>\n   *\n   * <p>To enable or disable the log: <code>foo.log.enabled = true</code></p>\n   *\n   * <p>To modify the prefix: <code>foo.log.prefix = 'Hello'</code></p>\n   *\n   * <p>To use a custom callback instead of <code>console.log</code>:\n   * <code>foo.log.handler = function() { ... };</code></p>\n   *\n   * @param *args Messages or objects to be logged\n   */\n  function log(...args) {\n    if (!log.enabled) {\n      return;\n    }\n    const format = log.prefix ? `${log.prefix} ` : '';\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      log.handler(\n        typeof arg === 'string'\n        ? format + arg\n        : arg\n      );\n    }\n  }\n\n  function defaultWarnHandler(x) {\n    /* eslint-disable no-console */\n    if (typeof console !== 'undefined') {\n      if (typeof console.warn === 'function') {\n        console.warn(x);\n      } else if (typeof console.log === 'function') {\n        console.log(x);\n      }\n    }\n    /* eslint-enable no-console */\n  }\n\n  function deprecated(...args) {\n    if (!log.warnings) {\n      return;\n    }\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      log.warnHandler(arg);\n    }\n  }\n\n  log.enabled = true;\n  log.prefix = prefix || '';\n  /** @ignore */\n  log.defaultHandler = x => {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') { console.log(x); }\n  };\n  log.handler = log.defaultHandler;\n  log.warnings = true;\n  log.defaultWarnHandler = defaultWarnHandler;\n  log.warnHandler = log.defaultWarnHandler;\n  log.deprecated = deprecated;\n  log.warn = deprecated;\n\n  object.log = log;\n}\nexports.mixinLog = mixinLog;\n"]}